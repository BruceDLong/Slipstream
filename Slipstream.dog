// Slipstream.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "The Slipstream Browser"
FileName = "Slipstream"
Version = "1.0"
CopyrightMesg = "Copyright 2020-2021 Bruce Long; All rights reserved."
Authors = "Bruce Long"
Description = "The Slipstream Browser"
ProgramOrLibrary = "program"

featuresNeeded = [GUI_ToolKit, Dashboard, Proteus]

LicenseText = `All rights reserved.`

runCode=`
    logMgr.init(OFile)
    thisApp.loadAndParseSettingsAndData()
    isFirstRun<-true
`
////////////   A p p l i c a t i o n   a n d   G l o b a l s

mainStyle = {
    colors = {
    }
    fontNames = {
    }
    fontSizes = {
        fontSizeSmall     = 8
    }
}


do makeStyler(mainStyle)
do makeGUI(GUI_Spec)

struct GLOBAL{
    me int: vertSepSmall   <- 5
    me int: vertSepMed     <- 30
    me int: vertListWidth  <- 200
    me int: headerHeight <- 25
    me int: horizListOPad  <- 5
    me int: Yborder <- 3
    me int: VListHeaderHeight <- 56

    me int: buttonWidth  <-55
    me int: buttonHeight <-22

    me cdColor: buttonBright <- cdColor(255,255,255,255)
    me cdColor: buttonNormal <- cdColor(200,200,200,200)
    me cdColor: surfaceBkgnd <- cdColor(20,20,20,200)
    me cdColor: titleTextColr<- cdColor(200,200,200,225)
    me cdColor: taskCardColor<- cdColor(240,245,240,245)
    me cdColor: cardTextColr <- cdColor(20,30,20,200)
    me cdColor: footerBoxColr<- cdColor(80,80,80,200)
}

struct labelButton: inherits=dash{
    void: init(me string: label) <- {
        title<-label
        width <- buttonWidth; height <- buttonHeight
    }
    me void: draw(their GUI_ctxt: cr) <- {
        if(mouseIsOver){cr.setColor(buttonBright)}else{cr.setColor(titleTextColr)}
        cr.rectangle(posX, posY,width,height)
        cr.fillNow()
        if(mouseIsOver){cr.setColor(footerBoxColr)}else{cr.setColor(cardTextColr)}
        renderTextCentered(cr, title, styler.smallFont, posX+width/2, posY+(height/2)+(styler.smallFont.height/2-2))
        cr.fillNow()
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        if (!isTouching(event.x, event.y)) {return(false)}
        getDashBrdMngr().closePopup()
        return(true)
    }
    void: mouseEnter(their GUI_MotionEvent: event) <- {requestRedraw()}
    void: mouseExit(their GUI_MotionEvent: event)  <- {requestRedraw()}
}

struct mesgPopup: inherits=Dashboard{
    me string: result
    me string: mesg
    me List<string>: buttons
    me string: buttonList  // 'ok|', 'ok|cancel|'

    void: init(me string: buttonList, me string: Mesg, me int: W, me int: H) <- {
        result <- ""
        mesg <- Mesg
        width<-W; height<-H;
        me string: btnLabel <- ""
        withEach pos in RANGE(0..buttonList.size()){
            me char: ch<-buttonList[pos]
            if(ch=="|"){buttons.pushLast(btnLabel); btnLabel <- ""}
            else{btnLabel <+- ch}
        }
        me int: numBtns <- buttons.size()
        withEach label in buttons{
            our labelButton:: lBtn; lBtn.init(label)
            lBtn.dashParent <- self
            addChild(lBtn)
        }
    }
    void: setPos(me GUI_Scalar:x, me GUI_Scalar:y, me GUI_Scalar: extCursor) <- {
        posIsSet <- true
        posX <- x; posY <- y; extC <- extCursor
        me int: numBtns <- buttons.size()
        me int: count <- 0
        withEach btn in dashChildren{
            btn.setPos(posX + width/numBtns*count+(width/numBtns/2) - buttonWidth/2, posY+height-(buttonHeight+5), 0)
            count <+- 1
        }
    }
    void: draw(their GUI_ctxt: cr) <- {
        cr.setColor(surfaceBkgnd)
        roundedRectangle(cr, posX, posY, width, height, 13)
        cr.fillNow()

        cr.setColor(footerBoxColr)
        renderText(cr, mesg, styler.defaultFont, posX+5, posY+((height-(buttonHeight+5))/2)+(styler.defaultFont.height/2-2))
        cr.fillNow()

        baseDraw(cr)
    }
}

struct GuiModelManager{

    void: processCommand(our ProactEvent: ev) <- {
        switch(ev.eventType){
        case eAddInfon:  {our POV: newPov <- ev.infonX.tryAddingTentativeChild(); newPov.pItem.isTentative<-false;  CORE.agent.normalize(ev.infonX); log("\nAdded Item:"+newPov.stringify())}
        case eReqRedraw: {}
        case eGUI_SetXY: {}
        }
        slipView.requestRedraw()
    }
}

struct viewStyles:inherits=<mode[vsDefault, vsX_stack, vsY_stack, vsZ_stack, vsPlotGraph, vsDataView, vsString, vsNumber, vsDate]> {}

struct Presenter{
    void: drawMessageDialog(our dashDrawing: dr, me string: buttonList, me string: Mesg, me GUI_Scalar: W, me GUI_Scalar: H) <- {

    }

    void: drawUnsizedElement(our dashDrawing: dr, our infon: element, me GUI_Scalar:posX, me GUI_Scalar:posY, their GUI_Scalar: width, their GUI_Scalar:height) <- {
        our POV: propertiesInf <- fetchField(element, "properties")
        our POV: titleInf      <- propertiesInf.pItem.fetchField("title");         if(titleInf==NULL){log("extract titleInf = NULL"); return()}
        me string: title       <- titleInf.pItem.fetchString()
        our POV: dataInf       <- element.fetchField("data"); if(dataInf==NULL){log("extract dataInf = NULL"); return()}
        our POV: screenPos     <- fetchField(propertiesInf.pItem, "screenpos")
        our POV: xPov          <- NULL
        our POV: yPov          <- NULL
        if(screenPos!=NULL){
            xPov <- fetchField(screenPos.pItem, "xpos")
            yPov <- fetchField(screenPos.pItem, "ypos")
            posX<-xPov.pItem.fetchDouble()
            posY<-yPov.pItem.fetchDouble()
        }

        //me mode[xStack, yStack, zStack, stringItem, integerItem, decimalItem]: viewStyle
        me viewStyles: viewStyle
        if(element.type.asGiven=="kanban"){ viewStyle <- vsX_stack}
        else if(element.type.asGiven=="tasklist"){ viewStyle <- vsY_stack}
        //log("INFON_TYPE:"+element.type.asGiven)
        me GUI_Scalar:xPos <- posX;
        me GUI_Scalar:yCur <- posY
        me GUI_Scalar:maxH <- 0

        if(viewStyle==vsX_stack){
            // Draw Columns
            me GUI_Scalar: itemHeight
            me GUI_Scalar: itemWidth
            draw_X_stack_XYwh(dr, dataInf, posX, posY+headerHeight, itemWidth, itemHeight, "headeredVList")

            // Kanban header
            width <deep- (xPos-8)-posX;
            height <deep- maxH+headerHeight;

            dr.addC(cmdSetColor, surfaceBkgnd)
            me GuiCoords:HedrRectXYWH{posX, posY, itemWidth, headerHeight-2};
            dr.addRAA(cmdRoundTopRect, HedrRectXYWH, 15)
            if(screenPos!=NULL){
                our ProactEvent:: dragEvent;
                dragEvent.setTrigger(tDragStart, HedrRectXYWH); dragEvent.setInfonEvent(eGUI_SetXY, xPov, yPov)
                registerEvent(dragEvent)
            }
            dr.add1(cmdFill)

            me GuiCoords:RA1{posX+itemWidth-25, posY+3, 16, 16}
            drawCircleButton(dr, RA1.X, RA1.Y, RA1.W/2, 3, "+", element.mySymbol()+"AddItem")
            our ProactEvent:: addListEvent;
            addListEvent.setTrigger(tPrimaryClick, RA1); addListEvent.setInfonEvent(eAddInfon, dataInf, NULL)
            registerEvent(addListEvent)

            dr.addC(cmdSetColor, titleTextColr)
            dr.addTF(cmdRenderTextCentered, posX+itemWidth/2, posY+(headerHeight/2)+(styler.smallFont.height/2-3), title, styler.smallFont)
        } else if(viewStyle==vsY_stack){
            dr.addC(cmdSetColor, surfaceBkgnd)
            me GuiCoords:RA{xPos, posY, vertListWidth, 0}
            our Drawel: boxDR <- dr.addRAA(cmdRoundBotRect, RA, 15) // Background for lists
            dr.add1(cmdFill)

            // Column Header
            dr.addC(cmdSetColor, titleTextColr)
            dr.addTF(cmdRenderTextCentered, posX+(vertListWidth/2), posY+(VListHeaderHeight/2)+(styler.titleFont.height/2-5), title, styler.titleFont)

            // Draw the list body
            yCur <- posY+VListHeaderHeight
            me GUI_Scalar: itemHeight
            draw_Y_stack_XYWh(dr, dataInf, posX, yCur, vertListWidth, itemHeight, "cardView")
            yCur <+- itemHeight

            // Draw the footer
            me int: footerHeight <- 27
            dr.addC(cmdSetColor, footerBoxColr)
            me GuiCoords:RAf{posX+5, yCur, vertListWidth-10, footerHeight-4}
            dr.addRAA(cmdRoundBotRect, RAf, 15)
            dr.add1(cmdFill)

            me GuiCoords:RA1{posX+10, yCur+3, 16, 16}
            drawCircleButton(dr, RA1.X, RA1.Y, RA1.W/2, 3, "menu", element.mySymbol()+"Menu")
            our ProactEvent:: addListEvent1;
            addListEvent1.setTrigger(tPrimaryClick, RA1); addListEvent1.setInfonEvent(eGUI_PopupModal, dataInf, NULL)
            registerEvent(addListEvent1)

            me GuiCoords:RA2{posX+vertListWidth-23, yCur+3, 16, 16}
            drawCircleButton(dr, RA2.X, RA2.Y, RA2.W/2, 3, "+", element.mySymbol()+"AddItem")
            our ProactEvent:: addListEvent2;
            addListEvent2.setTrigger(tPrimaryClick, RA2); addListEvent2.setInfonEvent(eAddInfon, dataInf, NULL)
            registerEvent(addListEvent2)

            yCur <+- footerHeight

            boxDR.h<-yCur-posY
        } else if(element.type.asGiven=="task"){
            me string: text<-title
            if(titleInf.pItem.value.format==fUnknown){text<-"<Empty>"}
            me GUI_Scalar:H2 <- styler.smallFont.height+ Yborder*2
            height <deep- H2
            width  <deep- vertListWidth-5*2
            me GUI_Scalar:W2 <- width
            dr.addC(cmdSetColor, taskCardColor)
            me GuiCoords:RA{posX, posY, W2, H2}
            dr.addRAA(cmdRoundRect, RA, 13)
            dr.add1(cmdFill)

            dr.addC(cmdSetColor, cardTextColr)
            dr.addTF(cmdRenderText, posX+5, posY+(H2/2)+(styler.smallFont.height/2-2), text, styler.smallFont)
        }
    }

    our POV: fetchField(our infon: info, me string: fieldname) <- {
        our POV: retVal <- info.fetchField(fieldname)
        if(retVal==NULL){log("infon's field == NULL:"+fieldname)}
        return(retVal)
    }

    void: drawDashboard(our dashDrawing: dr, our infon: board, me GUI_Scalar:posX, me GUI_Scalar:posY, me GUI_Scalar: width, me GUI_Scalar:height) <- {
        our POV: propertiesInf <- fetchField(board, "properties")
        our POV: titleInf      <- fetchField(propertiesInf.pItem, "title")
        our POV: backgroundInf <- fetchField(propertiesInf.pItem, "backgroundpic")
        our POV: dataInf       <- fetchField(board, "data")
        me string: title       <- titleInf.pItem.fetchString()
        me string: background  <- backgroundInf.pItem.fetchString()

        if(background!=""){dr.addT(cmdDrawBkgndImage, background)}
        dr.addC(cmdSetColor, surfaceBkgnd)
        me GuiCoords: RA{posX,posY,width,50}; dr.addRA(cmdDrawRect, RA)
        dr.add1(cmdFill)
        dr.addC(cmdSetColor, titleTextColr)
        me string: brdTitleText <- "Board: "+title
        me deltaSize: DSize <- getTextSize(brdTitleText, styler.titleFont)
        dr.addTF(cmdRenderTextCentered, windowW/2, 33, brdTitleText, styler.titleFont)
        me GuiCoords:RA1{width/2-(DSize.width/2+33), 6, 36, 36}
        drawCircleButton(dr, RA1.X, RA1.Y, RA1.W/2, 4, ">", board.mySymbol()+":open")

        me GuiCoords:RA2{20, 11, 28, 28}
        drawCircleButton(dr, RA2.X, RA2.Y, RA2.W/2, 4, "menu", board.mySymbol()+":Menu")

        me GuiCoords:RA3{width-50, 7, 36, 36}
        drawCircleButton(dr, RA3.X, RA3.Y, RA3.W/2, 5, "+", board.mySymbol()+":AddItem")
        our ProactEvent:: addListEvent3;
        addListEvent3.setTrigger(tPrimaryClick, RA3); addListEvent3.setInfonEvent(eAddInfon, dataInf, NULL)
        registerEvent(addListEvent3)

        our POV: pov <- dataInf.pItem.value.items.begin()
        while(pov){
            me GUI_Scalar: xPos <- 15
            me GUI_Scalar: yPos <- 75
            our infon: infn <- pov.pItem
            me GUI_Scalar: returnWidth
            me GUI_Scalar: returnHeight
            drawUnsizedElement(dr, infn, xPos, yPos, returnWidth, returnHeight)
            pov <- pov.next
        }
    }
}

struct SlipView: inherits=ProactiveGUIWidget{
    our infon: myInfon
    me int: crntBoardIdx
    //their appComponentGUI: parentGuiMgr

    me List<our infon>: boardInfons

    void: draw(their GUI_ctxt: cr) <- {
        proactiveGUI.presenter.reset()
        setwindowMetrics()
        our dashDrawing:: dr
        proactiveGUI.presenter.drawDashboard(dr, boardInfons[crntBoardIdx], 0,0,windowW,windowH)
        dr.render(cr)

    }
    void: setCrntBoard(me int: boardIdx) <-{
        crntBoardIdx <- boardIdx
    }
    bool: loadData(our infon: theInfon) <- {
        myInfon<-theInfon;
        our POV: projectsInf   <- myInfon.fetchField("projects");             if(projectsInf==NULL){log("extract projectsInf = NULL"); return(true)}
        our POV: propertiesInf <- projectsInf.pItem.fetchField("properties"); if(propertiesInf==NULL){log("extract propertiesInf = NULL"); return(true)}
        our POV: titleInf      <- propertiesInf.pItem.fetchField("title");    if(titleInf==NULL){log("extract titleInf = NULL"); return(true)}
            title      <- titleInf.pItem.fetchString()
        our POV: dataInf       <- projectsInf.pItem.fetchField("data")

        withEach infn in dataInf.pItem.value.items{
            if(infn.type!=NULL and infn.type.asGiven=="boardelement"){
                boardInfons.append(infn)
            }
        }
        setCrntBoard(boardInfons.size()-1) // Default to last board for now
        return(false) // No errors
    }
}

struct GLOBAL{
    me ProteusCore: CORE
    me ProactiveGUI: proactiveGUI
    me bool: isFirstRun
    their GUI_canvas: drawing_area
    their SlipView: slipView
}

struct APP{
    me bool: loadAndParseSettingsAndData() <- {
        me string: worldFileName <- "user.pr"
        CORE.init(worldFileName, false)
        if(CORE.WORLD==NULL){
            //~ our mesgPopup: errorPopup
            //~ errorPopup.init("ok|cancel|", CORE.errorMesg)
            //~ popUp <- errorPopup
            print(CORE.errorMesg, "\n")
            exit(1)
        }
        return(true)
    }

    me void: createAppArea(me GUI_Frame: frame) <- {
        Allocate(slipView)
        drawing_area  <- slipView.initProactiveGUI()
        slipView.loadData(CORE.WORLD)
        addToContainerAndExpand (frame, drawing_area)
    }
}
