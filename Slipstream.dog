// Slipstream.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' LangVersion='GNU' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "The Slipstream Browser"
FileName = "Slipstream"
Version = "1.0"
CopyrightMesg = "Copyright 2020-2021 Bruce Long; All rights reserved."
Authors = "Bruce Long"
Description = "The Slipstream Browser"
ProgramOrLibrary = "program"

featuresNeeded = [GUI_ToolKit, Dashboard, ReactGUI, Render3D, Slipstream, Proteus]

LicenseText = `All rights reserved.`

runCode=`
    CommandLineManager.defineOption("Slip", "topFile", "-f", "--file", "The top-level file to load.", "deviceKB.pr")
    me string: topFile <- CommandLineManager.getOption("Slip", "topFile")
    thisApp.loadAndParseSettingsAndData(topFile)
`

////////////   A p p l i c a t i o n   a n d   G l o b a l s

mainStyle = {
    colors = {
    }
    fontNames = {
    }
    fontSizes = {
        fontSizeSmall     = 8
    }
}


do ManageCmdLine(cmd)
do makeStyler(mainStyle)
do makeGUI(GUI_Spec)

struct GLOBAL{
    me int: vertSepSmall   <- 5
    me int: vertSepMed     <- 30
    me int: vertListWidth  <- 200
    me int: headerHeight   <- 25
    me int: horizListOPad  <- 5
    me int: Yborder <- 3
    me int: Xborder <- 3
    me int: VListHeaderHeight <- 30

    me int: buttonWidth  <-55
    me int: buttonHeight <-22

    me cdColor: buttonBright <- cdColor(255,255,255,255)
    me cdColor: buttonNormal <- cdColor(200,200,200,200)
    me cdColor: surfaceBkgnd <- cdColor(20,20,20,200)
    me cdColor: popupBkgnd   <- cdColor(20,20,20,250)
    me cdColor: titleTextColr<- cdColor(200,200,200,225)
    me cdColor: taskCardColor<- cdColor(240,245,240,245)
    me cdColor: cardTextColr <- cdColor(20,30,20,200)
    me cdColor: footerBoxColr<- cdColor(80,80,80,200)


    our POV: fetchField(our POV: info, me string: fieldname) <- {
        if(info==NULL){return(NULL)}
        our POV: retVal <- info.pItem.fetchField(fieldname)
        return(retVal)
    }

    me string: fetchStringField(our POV: info) <- {
        if(info==NULL){return("")}
        me string: retVal <- info.pItem.fetchString()
        if(info.pItem.value.format==fUnknown){retVal <- ""}
        return(retVal)
    }

    me int: fetchIntField(our POV: info) <- {
        if(info==NULL){return(0)}
        me int: retVal <- info.pItem.fetchInt()
        if(info.pItem.value.format==fUnknown){retVal <- 0}
        return(retVal)
    }

    void: drawACursor(our dashDrawing: dr, me GUI_Scalar: posX, me GUI_Scalar: posY, me GUI_Scalar: cursorHeight) <- {
        posY <+-3 // adjust for descenders
        dr.addC(cmdSetColor, styler.Black)
        dr.add2(cmdSetLineWidth, 1)
        dr.addXY(cmdMoveTo, posX, posY)
        dr.addXY(cmdLineTo, posX, posY-cursorHeight)
        dr.add1(cmdStroke)
    }

}

struct GuiModelManager{

    void: moveInfItemToEndToList(our POV: povToMove) <- { // Bring a window to the top of the screen Z-stack
        our POV: dataInf       <- fetchField(slipView.boardInfons[slipView.crntBoardIdx], "data")
        their PovList: povList <- dataInf.pItem.value.items
        if(povToMove===povList.tail){return()}
        povList.erase(povToMove)
        povList.appendPov(povToMove)
    }

    me bool: isPovTopWindow(our POV: povToCheck) <- {
        their PovList: povList <- slipView.boardInfons[slipView.crntBoardIdx].pItem.value.items.tail.pItem.value.items
        return(povToCheck===povList.tail)
    }

    void: processCommand(our ProactEvent: ev) <- {
        switch(ev.eventType){
        case eAddInfon:  {
            our POV: newPov <- ev.infonX.tryAddingTentativeChild();
            if(newPov){
                newPov.pItem.isTentative<-false;
                CORE.agent.normalize(ev.infonX);
                log("\nAdded Item:"+newPov.stringify())
                our ProactEvent:: EditTheNewItem
                EditTheNewItem.setGUI_popupEvent(slipView.boardInfons[slipView.crntBoardIdx].mySymbol()+"/editCardPopped", newPov)
                processCommand(EditTheNewItem)
            } else {// TODO: give some sign as to why nothing was added
                print("ITEM WAS NOT ADDED!\n")
            }
        }
        case eReqRedraw: {}
        case eGUI_SetXY: {}
        case eBlockEvents: {} //log("BLOCK_EVENT")
        case eGUI_setStr1:       {setString(ev.dataIdTag, ev.text)}
        case eGUI_PopupModal:    {our GuiDataRec:: GDR; GDR.int1<-1; GDR.pov<-ev.infonX;  guiData[ev.dataIdTag] <- GDR;  log("CLICKED:'"+ev.dataIdTag+"'  "+GDR.pov.stringify())}
        case eGUI_setInt1:       {our GuiDataRec:: GDR; GDR.int1<- ev.int1; guiData[ev.dataIdTag] <- GDR; log("setInt1["+ev.dataIdTag+"]:"+toString(ev.int1))}
        case eClosePopup:        {proactiveGUI.presenter.clearFocus(); our GuiDataRec: GDR<-fetchGuiData(ev.dataIdTag); GDR.int1<-0}
        case eGUI_setActiveFlag: {proactiveGUI.presenter.grabFocus(ev.dataIdTag)}
        case ePrimaryClick:      {our GuiDataRec: GDR<-guiData[ev.dataIdTag]; GDR.ctrl.primaryClick(ev.evX, ev.evY)}
        }
        if(ev.topPov!=NULL){moveInfItemToEndToList(ev.topPov)}
        slipView.requestRedraw()
    }
}

struct viewStyleTags:inherits=<mode[vsDefault, vsX_stack, vsY_stack, vsZ_stack, vsPlotGraph, vsDataView, vsString, vsNumber, vsDate]> {}

#include reactiveWidgets.dog


struct InfonicStructView: inherits=ReactiveControl{
    void: drawFromID(me string: guiItemID, our POV: dataInf) <- {
        me GUI_Scalar: popupHeight <- 400
        me GUI_Scalar: popupWidth  <- 400
        me GUI_Scalar: border <- 8
        our dashDrawing:: cardPopup
        // Draw background rectangle
        cardPopup.addC(cmdSetColor, surfaceBkgnd)
        me GuiCoords: RA{windowW/2-(popupWidth/2), windowH/2-(popupHeight/2), popupWidth, popupHeight};
        cardPopup.addRA(cmdDrawRect, RA)
        cardPopup.add1(cmdFill)
        // Draw the items
        our ParamRec:: cardEditPR; cardEditPR.init(dataInf, RA.X+border, RA.Y+border, popupWidth-(border*2), popupHeight-(border*2))
        cardEditPR.viewStyleTagArg <- "_edit"
        log(guiItemID+":"+dataInf.stringify())
        proactiveGUI.presenter.draw_Y_stack_XYWh(cardPopup, cardEditPR)
        slipView.addPopup(cardPopup)

        our ProactEvent:: closeCardEdit
        closeCardEdit.setTrigger(tPrimaryClick, RA) // Any click closes the menu
        closeCardEdit.setGUI_ClosePopup(guiItemID)
        proactiveGUI.presenter.registerBroadcastEvent(closeCardEdit)
    }
    me bool: expandsX()<-{return(false)}
    me bool: expandsY()<-{return(false)}
}

struct InfonicWidgetView: inherits=ReactiveControl{
    void: drawFromID(me string: guiItemID) <- {
        our GuiDataRec: GDR <- proactiveGUI.presenter.modelMgr.fetchGuiData(guiItemID)
        our POV: propertiesInf <- fetchField(GDR.pov, "properties")
        our POV: titleInf      <- fetchField(propertiesInf, "title")
        our POV: dataInf       <- fetchField(GDR.pov, "data")
        me GUI_Scalar: popupHeight <- 400
        me GUI_Scalar: popupWidth  <- 400
        me GUI_Scalar: border <- 8
        me GUI_Scalar: yCur   <- border
        our dashDrawing:: cardPopup
        // Draw background rectangle
        cardPopup.addC(cmdSetColor, surfaceBkgnd)
        me GuiCoords: RA{windowW/2-(popupWidth/2), windowH/2-(popupHeight/2), popupWidth, popupHeight};
        cardPopup.addRA(cmdDrawRect, RA)
        cardPopup.add1(cmdFill)

        our ProactEvent:: blockEvents;
        blockEvents.setTrigger(tPrimaryClick, RA); blockEvents.setGUI_Event1(eBlockEvents)
        proactiveGUI.presenter.registerEvent(blockEvents)

        // Draw the title editor
            our ParamRec:: innerPR; innerPR.init(titleInf, RA.X+border, RA.Y+yCur, RA.W-(border*2), 0) // TitleInf.dataPov not initializing.  Solution might be to pass propertiesInf instead
            innerPR.viewStyleTagArg <- "_edit"
            innerPR.font <- styler.defaultFont
            proactiveGUI.presenter.chooseviewStyleTag(innerPR)
            proactiveGUI.presenter.setNaturalDimensions(innerPR)
            if(innerPR.viewStyleCtrl!=NULL and innerPR.viewStyleCtrl.expandsX()){
                innerPR.posW <- RA.W-border*2
            }
            yCur <+- innerPR.posH
            proactiveGUI.presenter.drawItem(cardPopup, innerPR)

        // Draw the data items
        our ParamRec:: cardEditPR; cardEditPR.init(dataInf, RA.X+border, RA.Y+yCur, popupWidth-(border*2), popupHeight-yCur-(border*2))
        cardEditPR.viewStyleTagArg <- "_edit"
        log(guiItemID+":"+dataInf.stringify())
        proactiveGUI.presenter.draw_Y_stack_XYWh(cardPopup, cardEditPR)
        slipView.addPopup(cardPopup)

        our ProactEvent:: closeCardEdit
        closeCardEdit.setTrigger(tPrimaryClick, RA) // Any click closes the menu
        closeCardEdit.setGUI_ClosePopup(guiItemID)
        proactiveGUI.presenter.registerBroadcastEvent(closeCardEdit)
    }
}

struct TaskCardView: inherits=ReactiveControl{
    void: setMetrics(our ParamRec: PR) <- {
        PR.posW <- vertListWidth-5*2
        PR.posH <- WrappedTextHeight(PR.posW-10,PR.title, styler.smallFont)
    }
    void: draw(our dashDrawing: dr, our ParamRec: PR) <- {
        me string: text<-PR.title
        if(PR.titlePov.pItem.value.format==fUnknown){text<-"<Empty>"}
        me GUI_Scalar: boxWidth <- PR.posW
        dr.addC(cmdSetColor, taskCardColor)
        me GuiCoords:RA{PR.posX, PR.posY, boxWidth, PR.posH}
        dr.addRAA(cmdRoundRect, RA, 13)
        dr.add1(cmdFill)
        dr.addC(cmdSetColor, cardTextColr)
        drawWrappedText(dr, PR.posX+5,  PR.posY+2, boxWidth-10, text, styler.smallFont)

        our ProactEvent:: popUptoEditCard;
        popUptoEditCard.setTrigger(tPrimaryClick, RA, PR.topPov); popUptoEditCard.setGUI_popupEvent(slipView.boardInfons[slipView.crntBoardIdx].mySymbol()+"/editCardPopped", PR.sourcePov)
        proactiveGUI.presenter.registerEvent(popUptoEditCard)
    }
    me bool: expandsX()<-{return(false)}
    me bool: expandsY()<-{return(false)}
}

struct WidgetMngr{
    our TextEditBox:  staticTextEditBox
    our TaskCardView: staticTaskCardView
    our InfonicStructView: staticInfonicStructView
    our InfonicWidgetView: staticInfonicWidgetView
    void: init2() <- {
        Allocate(staticTextEditBox)
        Allocate(staticTaskCardView)
        Allocate(staticInfonicStructView)
        Allocate(staticInfonicWidgetView)
        setviewStyleTagCtrl("task", staticTaskCardView)
        setviewStyleTagCtrl("genericString_edit", staticTextEditBox)
        setviewStyleTagCtrl("genericInfonicStruct_edit", staticInfonicStructView)
        setviewStyleTagCtrl("genericInfonicWidget_edit", staticInfonicWidgetView)
        editFont <- styler.defaultFont
    }
}

struct Presenter{

    void: drawKanban(our dashDrawing: dr, our ParamRec: PR) <- {
        // Draw Columns
        our ParamRec:: listPR; listPR.init(PR.dataPov, PR.posX, PR.posY+headerHeight, 0, 0)
        listPR.topPov <- PR.sourcePov
        listPR.viewStyleTagArg <- "headeredVList"
        draw_X_stack_XYwh(dr, listPR)

        // Kanban header
        PR.posW <- listPR.posW
        PR.posH <- listPR.posH+headerHeight;

        dr.addC(cmdSetColor, surfaceBkgnd)
        me GuiCoords:HedrRectXYWH{PR.posX, PR.posY, listPR.posW, headerHeight-2};
        dr.addRAA(cmdRoundTopRect, HedrRectXYWH, 15)
        dr.add1(cmdFill)
        if(PR.screenPos!=NULL){
            our ProactEvent:: dragEvent;
            dragEvent.setTrigger(tDragStart, HedrRectXYWH); dragEvent.setInfonEvent(eGUI_SetXY, PR.xPov, PR.yPov)
            registerEvent(dragEvent)
        }

        me GuiCoords:RA1{PR.posX+listPR.posW-25, PR.posY+3, 16, 16}
        drawCircleButton(dr, RA1.X, RA1.Y, RA1.W/2, 3, "+", PR.sourcePov.mySymbol()+"AddItem")
        our ProactEvent:: addListEvent;
        addListEvent.setTrigger(tPrimaryClick, RA1, PR.topPov); addListEvent.setInfonEvent(eAddInfon, PR.dataPov, NULL) // ADD New Column
        registerEvent(addListEvent)

        dr.addC(cmdSetColor, titleTextColr)
        dr.addTF(cmdRenderTextCentered, PR.posX+listPR.posW/2, PR.posY+(headerHeight/2)+(styler.smallFont.height/2-3), PR.title, styler.smallFont)
    }

    void: drawListWidget(our dashDrawing: dr, our ParamRec: PR) <- {
        me GUI_Scalar:yCur <- PR.posY
        dr.addC(cmdSetColor, surfaceBkgnd)
        me GuiCoords:RA{PR.posX, yCur, vertListWidth, 0}
        me DrawCmd: dCmd <- cmdRoundRect
        if(PR.viewStyleTagArg=="headeredVList"){dCmd <- cmdRoundBotRect}
        our Drawel: boxDR <- dr.addRAA(dCmd, RA, 15) // Background for lists
        dr.add1(cmdFill)

        // Column Header
        dr.addC(cmdSetColor, titleTextColr)
        dr.addTF(cmdRenderTextCentered, PR.posX+(vertListWidth/2), yCur+(VListHeaderHeight/2)+(styler.titleFont.height/2-5), PR.title, styler.titleFont)

        if(PR.screenPos!=NULL){ // Enable dragging
            me GuiCoords:HedrRectXYWH{PR.posX, yCur, vertListWidth, VListHeaderHeight};
            our ProactEvent:: dragEvent;
            dragEvent.setTrigger(tDragStart, HedrRectXYWH); dragEvent.setInfonEvent(eGUI_SetXY, PR.xPov, PR.yPov)
            registerEvent(dragEvent)
        }
        // Draw the list body
        yCur <+- VListHeaderHeight
        our ParamRec:: listPR; listPR.init(PR.dataPov, PR.posX, yCur, vertListWidth, 0)
        listPR.viewStyleTagArg <- "cardView"
        draw_Y_stack_XYWh(dr, listPR)
        yCur <+- listPR.posH

        // Draw the footer
        me int: footerHeight <- 27
        dr.addC(cmdSetColor, footerBoxColr)
        me GuiCoords:RAf{PR.posX+5, yCur, vertListWidth-10, footerHeight-4}
        dr.addRAA(cmdRoundBotRect, RAf, 15)
        dr.add1(cmdFill)

        me GuiCoords:RA1{PR.posX+10, yCur+3, 16, 16}
        drawCircleButton(dr, RA1.X, RA1.Y, RA1.W/2, 3, "menu", PR.sourcePov.mySymbol()+"Menu")
        our ProactEvent:: popupPropertyEditor;
        popupPropertyEditor.setTrigger(tPrimaryClick, RA1, PR.topPov); popupPropertyEditor.setGUI_popupEvent(slipView.boardInfons[slipView.crntBoardIdx].mySymbol()+"/editCardPopped", PR.sourcePov)
        registerEvent(popupPropertyEditor)

        me GuiCoords:RA2{PR.posX+vertListWidth-23, yCur+3, 16, 16}
        drawCircleButton(dr, RA2.X, RA2.Y, RA2.W/2, 3, "+", PR.sourcePov.mySymbol()+"AddItem")
        our ProactEvent:: addListEvent2;
        addListEvent2.setTrigger(tPrimaryClick, RA2, PR.topPov); addListEvent2.setInfonEvent(eAddInfon, PR.dataPov, NULL) // ADD New List-Item
        registerEvent(addListEvent2)

        yCur <+- footerHeight
        PR.posW <- vertListWidth
        PR.posH <- yCur-PR.posY
        boxDR.h <- PR.posH
    }

    void: setNaturalDimensions(our ParamRec: PR) <- {
        if(PR.viewStyleCtrl!=NULL){
            PR.viewStyleCtrl.setMetrics(PR)
        }
    }

    void: drawItem(our dashDrawing: dr, our ParamRec: PR) <- {
        me string: viewStyleTag <- PR.viewStyleTag
        //print("viewStyleTag:"+viewStyleTag+"\n")
        if(viewStyleTag=="boardelement"){}
        else if(viewStyleTag=="kanban"){drawKanban(dr, PR)}
        else if(viewStyleTag=="tasklist"){drawListWidget(dr, PR)}
        else if(viewStyleTag=="terminal"){me TerminalApp: termApp; termApp.draw(dr, PR)}
        else if(viewStyleTag=="task"){PR.viewStyleCtrl.draw(dr, PR)}
        else if(viewStyleTag=="genericlist"){draw_Y_stack_XYWh(dr, PR)}
        else if(viewStyleTag=="genericstring" or viewStyleTag=="genericstring_edit"){PR.viewStyleCtrl.draw(dr, PR)}
        else if(viewStyleTag=="genericnumber"){PR.viewStyleCtrl.draw(dr, PR)}
        else if(viewStyleTag=="mystuff"){me Scene3D: scene; scene.draw(dr, PR)}
    }

    void: addLabeledButton(our dashDrawing: dr, me GuiCoords:myCoords, me string: btnLabel) <- {
        me bool: mouseIsOver <- addMouseOverEvents(myCoords)
        me cdColor: buttonColor
        if(mouseIsOver){buttonColor<-buttonBright} else {buttonColor<-buttonNormal}
        dr.addC(cmdSetColor, buttonColor)
        dr.addRA(cmdDrawRect, myCoords)
        dr.add1(cmdFill)

        if(mouseIsOver){dr.addC(cmdSetColor, cardTextColr)}else{dr.addC(cmdSetColor, cardTextColr)}
        dr.addTF(cmdRenderTextCentered, myCoords.X+myCoords.W/2, myCoords.Y+(myCoords.H/2)+(styler.smallFont.height/2-3), btnLabel, styler.smallFont)
        dr.add1(cmdFill)
    }

    void: drawMessageDialog(our dashDrawing: dr, me string: buttonList, me string: Mesg, me GUI_Scalar: posX, me GUI_Scalar: posY, me GUI_Scalar: width, me GUI_Scalar: height, our ProactEvent: btn1Ev, our ProactEvent: btn2Ev) <- {
        me int: buttonWidth  <-65
        me int: buttonHeight <-30

        dr.addC(cmdSetColor, taskCardColor)
        me GuiCoords:RA{posX, posY, width, height}
        dr.addRAA(cmdRoundRect, RA, 13)
        dr.add1(cmdFill)

        our ProactEvent:: blockEvents;
        blockEvents.setTrigger(tPrimaryClick, RA); blockEvents.setGUI_Event1(eBlockEvents)
        registerEvent(blockEvents)

        dr.addC(cmdSetColor, footerBoxColr)
        dr.addTF(cmdRenderTextCentered, posX+width/2, posY+((height-(buttonHeight+5))/2)+(styler.defaultFont.height/2-2), Mesg, styler.defaultFont)
        dr.add1(cmdFill)

        me List<string>: buttons
        me string: btnLabel <- ""
        me int: buttonStrSize <- buttonList.size()
        withEach pos in RANGE(0..buttonStrSize){
            me char: ch<-buttonList[pos]
            if(ch=="|" or pos==buttonStrSize-1){
                if(ch!="|" and pos==buttonStrSize-1){btnLabel <+- ch}
                buttons.pushLast(btnLabel)
                btnLabel <- ""
            }
            else{btnLabel <+- ch}
        }
        me int: numBtns <- buttons.size()
        me int: count <- 0
        withEach label in buttons{
            me GuiCoords:RA{posX + width/numBtns*count+(width/numBtns/2) - buttonWidth/2,   posY+height-(buttonHeight+5), buttonWidth, buttonHeight}
            addLabeledButton(dr, RA, label)
            if(count==0 and btn1Ev!=NULL){btn1Ev.setTrigger(tPrimaryClick, RA)}
            if(count==1 and btn2Ev!=NULL){btn2Ev.setTrigger(tPrimaryClick, RA)}
            count <+- 1
        }
    }

    void: drawSelectFromList(our dashDrawing: dr, our POV: listInfon, me GUI_Scalar:posX, me GUI_Scalar:posY) <- {
        me int: width <- 250
        me int: itemHeight <- 60
        me int: numItems <- listInfon.pItem.value.items.size()
        me GuiCoords: RA{posX, posY, width, itemHeight*numItems}
        dr.addC(cmdSetColor, popupBkgnd);    dr.addRAA(cmdRoundBotRect, RA, 15); dr.add1(cmdFill)
        dr.addC(cmdSetColor, titleTextColr); dr.addRAA(cmdRoundBotRect, RA, 15); dr.add1(cmdStroke)
        me int: yCur <- RA.Y
        me int: xCur <- RA.X+10
        me int: count <- 0
        our POV: pov <- listInfon.pItem.value.listSpec.value.items.front()
        while(pov){
            our POV: propertiesInf <- fetchField(pov, "properties")
            our POV: titleInf      <- fetchField(propertiesInf, "title")
            me string: title       <- fetchStringField(titleInf)

            me GuiCoords: ItmRA{posX, yCur, width, itemHeight}
            dr.addC(cmdSetColor, titleTextColr); dr.addRA(cmdDrawRect, ItmRA); dr.add1(cmdStroke)
            dr.addC(cmdSetColor, titleTextColr)
            dr.addTF(cmdRenderText, xCur, yCur+(itemHeight/2)+(styler.titleFont.height/2-9), title, styler.titleFont)

            our ProactEvent:: brdItmEvent;
            brdItmEvent.setTrigger(tPrimaryClick, ItmRA); brdItmEvent.setGUI_Store_Int1(listInfon.mySymbol()+"/dropdown", count)
            registerEvent(brdItmEvent)
            yCur <+- itemHeight
            count <+- 1
            pov <- pov.next
        }
    }

    void: drawBoardMenu(our dashDrawing: dr, me GUI_Scalar:posX, me GUI_Scalar:posY) <- {
        me int: width <- 250
        me int: footerHeight <- 35
        slipView.scanBoards()
        me int: numboards <- slipView.boardInfons.size()
        me int: boardItemHeight <- 60
        me GuiCoords: RA{posX, posY, width, boardItemHeight*numboards+footerHeight}
        dr.addC(cmdSetColor, popupBkgnd);    dr.addRAA(cmdRoundBotRect, RA, 15); dr.add1(cmdFill)
        dr.addC(cmdSetColor, titleTextColr); dr.addRAA(cmdRoundBotRect, RA, 15); dr.add1(cmdStroke)
        me int: yCur <- RA.Y
        me int: xCur <- RA.X+10
        me int: count <- 0
        withEach board in slipView.boardInfons{
            our POV: propertiesInf <- fetchField(board, "properties")
            our POV: titleInf      <- fetchField(propertiesInf, "title")
            me string: title       <- fetchStringField(titleInf)

            me GuiCoords: ItmRA{posX, yCur, width, boardItemHeight}
            dr.addC(cmdSetColor, titleTextColr); dr.addRA(cmdDrawRect, ItmRA); dr.add1(cmdStroke)
            dr.addC(cmdSetColor, titleTextColr)
            dr.addTF(cmdRenderText, xCur, yCur+(boardItemHeight/2)+(styler.titleFont.height/2-9), title, styler.titleFont)

            our ProactEvent:: brdItmEvent;
            brdItmEvent.setTrigger(tPrimaryClick, ItmRA); brdItmEvent.setGUI_Store_Int1(slipView.myInfon.mySymbol()+"/crntBoard", count)
            registerEvent(brdItmEvent)
            yCur <+- boardItemHeight
            count <+- 1
        }
// Draw the footer
        dr.addC(cmdSetColor, footerBoxColr)
        me GuiCoords:RAf{posX+5, yCur+5, width-10, footerHeight-9}
        dr.addRAA(cmdRoundBotRect, RAf, 15)
        dr.add1(cmdFill)

        me GuiCoords: addBtnRA{posX, yCur, width, footerHeight}
        dr.addC(cmdSetColor, footerBoxColr); dr.addRAA(cmdRoundBotRect, addBtnRA, 15); dr.add1(cmdStroke)
        dr.addC(cmdSetColor, titleTextColr)
        dr.addTF(cmdRenderTextCentered, posX+width/2, yCur+(footerHeight/2)+(styler.smallFont.height/2-1), "Create a new board", styler.smallFont)

        our ProactEvent:: addBoardEvent;
        addBoardEvent.setTrigger(tPrimaryClick, addBtnRA); addBoardEvent.setInfonEvent(eAddInfon, slipView.dataInf, NULL) // ADD New Board
        registerEvent(addBoardEvent)

    }

    void: drawDashboard(our dashDrawing: dr, our POV: board, me GUI_Scalar:posX, me GUI_Scalar:posY, me GUI_Scalar: width, me GUI_Scalar:height) <- {
        me string: itemID      <- board.mySymbol()
        our POV: propertiesInf <- fetchField(board, "properties")
        our POV: titleInf      <- fetchField(propertiesInf, "title")
        our POV: backgroundInf <- fetchField(propertiesInf, "backgroundpic")
        our POV: dataInf       <- fetchField(board, "data")
        me string: title       <- fetchStringField(titleInf)
        me string: background  <- fetchStringField(backgroundInf)
        me string: modalPopupID<- itemID+"/modalPoped"
        me string: boardPopupID<- itemID+"/boardListPopped"
        me string: eCardPopupID<- itemID+"/editCardPopped"
        me bool: modalPoped      <- modelMgr.getBool(modalPopupID, false)
        me bool: boardListPopped <- modelMgr.getBool(boardPopupID, false)
        me bool: editCardPopped  <- modelMgr.getBool(eCardPopupID, false)

        if(background!=""){dr.addT(cmdDrawBkgndImage, background)}
        dr.addC(cmdSetColor, surfaceBkgnd)
        me GuiCoords: RA{posX,posY,width,50}; dr.addRA(cmdDrawRect, RA)
        dr.add1(cmdFill)
        dr.addC(cmdSetColor, titleTextColr)
        me string: brdTitleText <- "Board: "+title
        me deltaSize: DSize <- getTextSize(brdTitleText, styler.titleFont)
        dr.addTF(cmdRenderTextCentered, windowW/2, 33, brdTitleText, styler.titleFont)
        me GuiCoords:open_RA{width/2-(DSize.width/2+33), 6, 36, 36}
        drawCircleButton(dr, open_RA.X, open_RA.Y, open_RA.W/2, 4, ">", board.mySymbol()+":open")
        our ProactEvent:: brdMenuEvent;
        brdMenuEvent.setTrigger(tPrimaryClick, open_RA); brdMenuEvent.setGUI_Store_Int1(boardPopupID, 1)
        registerEvent(brdMenuEvent)

        me GuiCoords:RA2{20, 11, 28, 28}
        drawCircleButton(dr, RA2.X, RA2.Y, RA2.W/2, 4, "menu", board.mySymbol()+":Menu")
        our ProactEvent:: addMenuEvent;
        addMenuEvent.setTrigger(tPrimaryClick, RA2); addMenuEvent.setGUI_Store_Int1(modalPopupID, 1)
        registerEvent(addMenuEvent)

        me GuiCoords:RA3{width-50, 7, 36, 36}
        drawCircleButton(dr, RA3.X, RA3.Y, RA3.W/2, 5, "+", board.mySymbol()+":AddItem")
        our ProactEvent:: addListEvent3;
        addListEvent3.setTrigger(tPrimaryClick, RA3); addListEvent3.setInfonEvent(eAddInfon, dataInf, NULL) // ADD New Dash to Crnt Board
        registerEvent(addListEvent3)

        our POV: pov <- dataInf.pItem.value.items.front()
        while(pov){
            our ParamRec:: iPR; iPR.init(pov, 15, 75, 0, 0);
            iPR.isADash <- true; iPR.topPov <- pov
            chooseviewStyleTag(iPR)
            drawItem(dr, iPR)
            pov <- pov.next
        }

        if(editCardPopped){
            widgetMngr.staticInfonicWidgetView.drawFromID(eCardPopupID)
        }

        if(boardListPopped){
            our dashDrawing:: boardPopup
            drawBoardMenu(boardPopup, open_RA.X, open_RA.Y+36)
            slipView.addPopup(boardPopup)

            our ProactEvent:: closeBrdMenu
            me GuiCoords:null_RA{-1,0,0,0}
            closeBrdMenu.setTrigger(tPrimaryClick, null_RA) // Any click closes the menu
            closeBrdMenu.setGUI_Store_Int1(boardPopupID, 0)
            registerBroadcastEvent(closeBrdMenu)
        }

        if(modalPoped){
            our ProactEvent:: YesBtnEvent;
            YesBtnEvent.setGUI_Store_Int1(modalPopupID, 0)

            our dashDrawing:: menuPopup
            drawMessageDialog(menuPopup, "Yes|WTF?", "Can you read this text?\nSubtitle", windowW/2-125, windowH/2-75,250,150, YesBtnEvent, NULL)
            registerEvent(YesBtnEvent)
            slipView.addPopup(menuPopup)
        }
    }
}

struct SlipView: inherits=ProactiveGUIWidget{
    our infon: myInfon
    me int64: crntBoardIdx
    our POV: userInfon
    our POV: projectsInf
    our POV: propertiesInf
    our POV: titleInf
    our POV: dataInf

    me List<our POV>: boardInfons
    our dashDrawing: popup_dr

    void: draw(their GUI_ctxt: cr) <- {
        popup_dr<-NULL
        proactiveGUI.presenter.reset()
        crntBoardIdx <- proactiveGUI.presenter.modelMgr.getInt64(myInfon.mySymbol()+"/crntBoard", 0)
        setwindowMetrics()
        if(crntBoardIdx >= boardInfons.size()){logFatalError("Non-existant board requested:"+toString(crntBoardIdx)+" of "+toString(boardInfons.size()))}
        our dashDrawing:: dr
        proactiveGUI.presenter.drawDashboard(dr, boardInfons[crntBoardIdx], 0,0,windowW,windowH)
        dr.render(cr)
        if(popup_dr!=NULL){
            log("POP_UP!")
            popup_dr.render(cr)
        }

    }

    void: addPopup(our dashDrawing: popup) <- {
        popup_dr <- popup
    }

    void: setCrntBoard(me int64: boardIdx) <-{
        crntBoardIdx <- boardIdx
        proactiveGUI.presenter.modelMgr.setInt64(myInfon.mySymbol()+"/crntBoard", crntBoardIdx)
    }
    void: scanBoards() <- {
        boardInfons.clear()
        our POV: pov <- dataInf.pItem.value.items.front()
        while(pov){
            our infon: infn <- pov.pItem
            if(infn.type!=NULL and unicodeMgr.normalizeStr(infn.type.asGiven)=="boardelement"){
                boardInfons.append(pov)
            }
            pov <- pov.next
        }
    }
    bool: loadData(our infon: theInfon) <- {
        myInfon <- theInfon
        userInfon     <- theInfon.fetchField("brucelong");             if(userInfon==NULL){log("extract userInfon = NULL"); return(true)}
        projectsInf   <- fetchField(userInfon, "projects")
        propertiesInf <- fetchField(projectsInf, "properties")
        titleInf      <- fetchField(propertiesInf, "title")
            title      <- fetchStringField(titleInf)
        dataInf       <- fetchField(projectsInf, "data")

        scanBoards()
        if(boardInfons.size()==0){logFatalError("No boards are loaded")}
        setCrntBoard(boardInfons.size()-1) // Default to last board for now


// load myStuff
myStuff <- theInfon.fetchField("mystuff")

        return(false) // No errors
    }
}

struct GLOBAL{
our POV: myStuff // Do better design for this
    me ProactiveGUI: proactiveGUI
    their GUI_canvas: drawing_area
    their SlipView: slipView
}

struct APP{
    void: init3DRenderSystem() <- {
        setUpMatrixes(90.0, 80, 150, 700.0, 400.0)

        // Setup lights
        their LightSource: lightSrc;
        Allocate(lightSrc)
        lightSrc.init(lsAmbient, Styler.DarkGray, 0.0, 0.0, 0.0)
        lightSources.append(lightSrc)
        Allocate(lightSrc)
        lightSrc.init(lsDirected, Styler.White, -35.0, -35.0, -45.0)
        lightSources.append(lightSrc)
    }
    me bool: loadAndParseSettingsAndData(me string: topFileName) <- {
        init3DRenderSystem()
        CORE.init(topFileName)
        CORE.start()
        CORE.connectionMgr.user.iStream.waitForCompletion()
        widgetMngr.init()
        widgetMngr.init2()
        CORE.shutdown()
        return(true)
    }

    me void: createAppArea(me GUI_Frame: frame) <- {
        Allocate(slipView)
        drawing_area  <- slipView.initProactiveGUI()
        slipView.loadData(CORE.agent.user)
        addToContainerAndExpand (frame, drawing_area)
    }
}
