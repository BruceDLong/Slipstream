// infonExper.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' LangVersion='GNU' optimize='speed';

Title = "infon Experimenter"
FileName = "infonExper"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2021 Bruce Long"
Authors = "Bruce Long"
Description = "Run experiments on infons"
ProgramOrLibrary = "program"

featuresNeeded = [Logger, GUI_ToolKit, Dashboard, List]

LicenseText = `All Rights Reserved.`


mainStyle = {}
runCode=`
    logMgr.init(OFile)
    log("infonExper started")
    //~ me iExp: exp
    //~ exp.run()

    //~ me testConstructing: testCtring
    //~ testCtring.run()

    me testQuotients: testQ
    testQ.doTest()
`

do makeStyler(mainStyle)
do makeGUI(GUI_Spec)

struct GLOBAL{

    me string:zeroOrOneMode <- "zero" // Change to switch mode

    void: drawArrow(their GUI_ctxt: cr, me int: startX, me int: startY, me int: endX, me int: endY) <- {
        me double: tipLength <- 10
        me double: tipAngle <- 0.35

        me double: angle <- atan2(double(endY) - double(startY), double(endX) - double(startX)) + 3.14159265359

        me double: x1 <- double(endX) + tipLength * cos(angle - tipAngle)
        me double: y1 <- double(endY) + tipLength * sin(angle - tipAngle)
        me double: x2 <- double(endX) + tipLength * cos(angle + tipAngle)
        me double: y2 <- double(endY) + tipLength * sin(angle + tipAngle)

        cr.moveTo(startX, startY)
        cr.lineTo(endX, endY)
        cr.lineTo(x1, y1)
        cr.lineTo(x2, y2)
        cr.lineTo(endX, endY)
        cr.closePath()
        cr.fillKeep()
        cr.strokeNow()
    }

    bool: isSmallPrime(me int: n) <- {
        if(n==3 or n==5 or n==7 or n==11 or n==13){return(true)}
        return(false)
    }
}

struct inf{
    our inf: baseline
    me List<our inf>: items
    me flag: isBase

    me int: isValid(me int: val) <- {
        me int: size <- items.size()

             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX-1,size)])

        our inf: startItm <- items[0]
        our inf: crntBaseItm <- startItm
        our inf: crntItm <- items[indexOf(crntBaseItm)]
        withEach idx in RANGE(0..size){

    //~ print("\n     idx:", idx, "   Base idx:", baseline.indexOf(crntBaseItm), "\t(", crntBaseItm.mySymbol(), ")",
                              //~ "   val idx:",  indexOf(crntItm), "\t(", crntItm.mySymbol(), ")"
    //~ )
            if(crntItm !== crntBaseItm){
    //            print("\n\n")
               // print("INV: *",size,"+",val," ERR: items[",idx,"] = ",items[idx].mySymbol(), " !=== ",crntBaseItm.mySymbol(), "\n")
                return(false)
            }
            crntItm <- findNext(crntItm, 1, size)

            crntBaseItm <- baseline.findNext(crntBaseItm, val, size)
            if(crntBaseItm===startItm){
                crntBaseItm <- baseline.findNext(crntBaseItm, 1, size)
                startItm <- crntBaseItm
            }
        }
     //   print("\n\n")
        return(true)
    }

    void: initAsBaseline(me int: size, our inf: myself) <- {
        baseline <- myself
        isBase <- true
        items.clear()
        withEach count in RANGE(0..size){
            our inf:: itm   // allocate a null inf
            items.append(itm)
        }
    }
    void: initAscopyOf(our inf: orig) <- {
        me int: size <- orig.items.size()
        baseline <- orig.baseline
        items.clear()
        withEach count in RANGE(0..size){
            items.append(orig.items[count])
        }
    }
    void: initAsQuotientBaseLine(our inf: base, me int: size) <- {
        baseline <- base
    }

    me int: indexOf(their inf: item) <- {
        me int: size <- items.size()
        if(size==0){print("\n\nCannot take index of inf with no items.\n")}
        withEach idx in RANGE(0..size){
            if(item===items[idx]){return(idx)}
        }
        print("Index of ",item.mySymbol()," not found in:")
        withEach idx in RANGE(0..size){print(items[idx].mySymbol(),"  ")}
        print("\n")
        return(-1)
    }

    our inf: findNext(their inf: crnt, me int: n, me int: size) <- {
        me int: crntPos <- indexOf(crnt)
        if(crntPos==-1){print("\n\nCould not find index of arg.\n")}
        me int: nextPos <- (crntPos+n)%size
        return(items[nextPos])
    }

    void: clear()<-{baseline <-NULL; items.clear()}

    void: initInf(our inf: base, me int: size, me int: value)<-{
        //print("initializing *", size, "+", value, ":" )
        baseline <- base
        our inf: startItm <- baseline.items[0]
        our inf: crntItm <- startItm
        withEach idx in RANGE(0..size){
            if(zeroOrOneMode=="zero"){items.append(crntItm)}
            crntItm <- baseline.findNext(crntItm, value, size)
            //print(toString(baseline.indexOf(crntItm))+" ")
            if(zeroOrOneMode!="zero"){items.append(crntItm)}
            if(crntItm===startItm){
                crntItm <- baseline.findNext(crntItm, 1, size)
                startItm <- crntItm
            }
        }
        //print("\n")
    }

    void: initWithBase(me int: size, me int: value) <- {
        our inf:: bLine
        bLine.initAsBaseline(size, bLine)
        initInf(bLine, size, value)
    }

    void: initAsCoset(our inf: parent, me int: size, me int: offset) <- {
        clear()
        me int: quotient <- parent.items.size()/size
        baseline <- parent //.baseline
        withEach pos in RANGE(0..size){
            items.append(parent.items[pos*quotient+offset])
        }
    }

    void: initAsCosets(our inf: parent, me int: size, our inf: myself) <- {
        clear()
        me int: quotient <- size //parent.items.size()/size
        baseline <- myself
        withEach pos in RANGE(0..size){
            our inf:: itm; itm.initAsCoset(parent, quotient, pos)
            items.append(itm)
        }
    }

    void: initAsQuotient(our inf: parent, me int: divisor) <-{
        me int: parentSize <- parent.items.size()
        me int: resultSize <- parentSize/divisor

        our inf: startItm <- parent.items[0%parentSize]
        our inf: crntItm <- startItm
        our inf:: bLine
        bLine.initAsBaseline(resultSize, bLine)
        baseline <- bLine
        me List<me int>:baseItems
    //    print("  QUOT               [")
        withEach idx in RANGE(0..resultSize){
            me int: newIDX <- parent.baseline.indexOf(crntItm)
     //       print("%",newIDX," ",parent.baseline.items[newIDX].mySymbol(),"   ")
            baseItems.append(newIDX)
            items.append(crntItm)
            crntItm <- parent.findNext(crntItm, divisor, parentSize)
            if(crntItm===startItm){
                crntItm <- parent.findNext(crntItm, 1, parentSize)
                startItm <- crntItm
            }
        }
   //     print("]\n")

        me int: count <- 0
        withEach item in parent.baseline.items{
            withEach result in baseItems{
                if(item.mySymbol()==parent.baseline.items[result].mySymbol()){
                    baseline.items[count] <- parent.baseline.items[result]
                    count <+- 1
                    break()
                }
            }
        }

    }

    void: initAsDivisor(our inf: parent, me int: quotient, me int:phase) <-{
        // Determine the roles of value and base for flexibility
        our inf: val <- parent; // Default: use parent for value
        our inf: base <- parent.baseline; // Default: use baseline for base

        // Adjust size calculations based on the current roles
        me int: parentSize <- val.items.size()
        me int: resultSize <- parentSize/quotient
        if (parentSize % quotient != 0) {
            print("Warning: Parent size is not divisible by the quotient. Results may be incorrect.\n")
        }

        // Determine the starting item based on the phase
        me int:startIndex <- (phase * resultSize) % parentSize
        our inf: prevItem <- NULL
        our inf: startItm <- val.items[startIndex]
        our inf: crntItm <- startItm
        // Initialize the baseline and result arrays
        our inf:: bLine
        bLine.initAsBaseline(resultSize, bLine)
        baseline <- bLine
        me List<me int>:baseItems

        print("  DIV:  [")
        // Collect the divisor items
        withEach idx in RANGE(0..resultSize){
            // Add the current item to the result
            me int: newIDX <- base.indexOf(crntItm)
            print("%",newIDX," ",base.items[newIDX].mySymbol(),"   ")

            baseItems.append(newIDX)
            items.append(crntItm)
            // Find the next item in the value array
            crntItm <- val.findNext(crntItm, 1, parentSize)

        }
        print("]\n")

        // Map the collected items back to the baseline
        our inf: lastItem <- baseItems[baseItems.size()-1]
        me int: count <- 0
        withEach item in parent.baseline.items{
          //  if(count==1 && item
            withEach result in baseItems{
                if(item.mySymbol()==parent.baseline.items[result].mySymbol()){
                    baseline.items[count] <- parent.baseline.items[result]
                    count <+- 1
                    break()
                }
            }
        }
    print(stringifyFull("Result infon"),"\n")

    }


    me int: negMod(me int:val, me int:mod) <- {
        if(val<0){return(val+mod)}
        return(val%mod)
    }

    me int: value() <- {
        me int: size <- items.size()
        if(zeroOrOneMode=="one"){
            if(size==1){return(0)}
            me int: count <- 0
             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             if(zeroIDX==-1){print("\nAt: Val1\n"); exit(1);}
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX-1,size)])
             if(prevIDX==-1){print("\nAt: Val2\n"); exit(1);}
             //print("  ### zeroIDX:",zeroIDX, "   prevIDX:", prevIDX,"\n")
             return(size-prevIDX)


            our inf: end <- items[0]
            me int: endIDX   <- baseline.indexOf(end)
           // print("  ### Start:",startIDX, "   End:", endIDX,"\n")
           // return(abs((startIDX+5) - endIDX))
            our inf: crnt <- items[0]
            //our inf: crnt <- items[indexOf(baseline.items[0])]
            while(count < size and !(crnt===baseline.items[count % size])){
                count <+- 1
            }
            return(count)
        }
        else if(zeroOrOneMode=="zero"){
            if(size==1){return(0)}
             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             if(zeroIDX==-1){print("\nAt: Val3\n"); exit(1);}
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX+1,size)])
             if(prevIDX==-1){print("\nAt: Val4\n"); print("in ",mySymbol(),"\n"); exit(1);}
             return(prevIDX)
        }
        return(-1)
    }

    void: rebase(our inf: zero, me int: newBaseVal) <- {
        me int: size <- items.size()
        if(zero.items.size() != size){print("\n\nError: in Rebase: this.size!=zero.size: zsize:",zero.items.size(),"  size:",size,"\n")}
        our inf: startItm <- zero.items[0]
        our inf: crntItm <- startItm
        items.clear()
        //baseline <- zero
        withEach idx in RANGE(0..size){
            crntItm <- zero.findNext(crntItm, newBaseVal, size)
            //print(toString(indexOf(crntItm))+" ")
            items.append(crntItm)
            if(crntItm===startItm){
                crntItm <- zero.findNext(crntItm, 1, size)
                startItm <- crntItm
            }
        }
    }

    me string: stringify() <- {
        if(self==NULL){return("NULL")}
        me int: size <- items.size()
        if(size==0){
            me string: mSym <- mySymbol()
            me int: msLen <- mSym.size()-3
            me string: digits <- mSym.subStr(3, msLen)
            me int: val <- stoi(digits)-1
            if(val==9){msLen <-- 1}
            me string: result <- "#"+ toString(val)
            withEach p in RANGE(msLen..2){ result <+- " "}
            return(result)
        }
        me string: S <- "*"
        S <+- toString(size)
        me int: val <- value()
        S <+- "+" + toString(val)
        return(S)
    }

    me string: stringifyByPos(our inf: base) <- {
        if(self==NULL){return("NULL")}
        me int: size <- items.size()
        if(size==0){
            me int: val <- base.indexOf(this)
            me string: result <- "%"+ toString(val)+"  "
            return(result)
        }
        return(stringify())
    }

    me string: stringifyLong(me int: depth) <- {
        me string: S <- stringify()+":["
        withEach idx in RANGE(0..items.size()){
            if(depth>0){
                S <+- items[idx].stringifyLong(depth-1)+" "
            }else{
                //S <+- items[idx].stringify()+" "
                S <+- items[idx].stringifyByPos(baseline)+" "
            }
        }
        S <+- "]"
        me int: val <- value()
        if(!isValid(val)){print(":INVALID<",val,"> ")}
        return(S)
    }

    me string: stringifyFull(me string: label) <- {
        me string: S <- ""
        S <+- "####################### "+label+"\n"
        S <+- "S-IFY: "+stringifyLong(0)+"\n"
        S <+- " BASE:  [";
        withEach item2 in baseline.items{S <+- item2.mySymbol()+"\t"}
        S <+- "]\n"
        S <+- " VALUE: ["
        withEach item3 in items{S <+- item3.mySymbol()+"\t"}
        S <+- "]\n"
        S <+- "\n"
        return(S)
    }

    void: printCosets(me int:size, our inf: myself) <- {
        me int: quotient <- items.size()/size
        withEach idx in RANGE(0..quotient){
            our inf:: Inf; Inf.initAsCoset(myself, size, idx)
            print("    ",idx,"\t", Inf.stringifyLong(0), "\n")
        }
    }

    void: draw(their GUI_ctxt: cr, me int: xLoc, me int: yLoc) <- {

        print("In DRAW Infon\n")
        if(self==NULL){
            cr.setColor(styler.Black)
            renderText(cr, "NULL ", textFont, xLoc, yLoc)
            cr.strokeNow()
            return()
        }
        me string: S <- stringify()+":"
        if(isBase){S <- "BASE:"}
            cr.setColor(styler.Black)
            renderText(cr, S, textFont, xLoc, yLoc+20)
            cr.strokeNow()

        me int: xpos <- xLoc
        cr.rectangle(xLoc+65, yLoc, items.size()*30, 25); cr.strokeNow()
        withEach idx in RANGE(0..items.size()){
            cr.moveTo(xLoc+65+((idx+1)*30), yLoc)
            cr.lineTo(xLoc+65+((idx+1)*30), yLoc+25)
        }
        cr.strokeNow()
        if(!isBase){
            cr.setColor(styler.Blue)
            withEach idx in RANGE(0..items.size()){
                me int: baseIdx  <- baseline.indexOf(items[idx])
                drawArrow(cr, xLoc+65+((idx)*30)+15, yLoc+10, xLoc+65+((baseIdx)*30)+15, yLoc-60+25)
            }
        }
    }

}

struct testConstructing{
    void: run() <- {
        me int: max <- 12
        our inf:: masterBaseline
        masterBaseline.initAsBaseline(25, masterBaseline)//maxSize*maxSize)
        print("master:", masterBaseline.stringifyLong(0), "\n\n")
        withEach A_size in RANGE(1..max+1){         if(A_size==0){print("!#ZERO:", A_size)}
            withEach A_val in RANGE(0..A_size){
                our inf:: termA; termA.initInf(masterBaseline, A_size, A_val)
                print(" termA: ",A_size,": ", termA.stringifyLong(0), "\n")
            }
            print("\n");
        }
    }
}

struct innerAdd{
    our inf: baseline

    void: doOp(our inf: infA, our inf: infB, our inf: result) <- {
            me int: sum <- infA.value() + infB.value()
            result.baseline <- infA.baseline
            withEach idx in RANGE(0..infA.items.size()){
                result.items.append(infA.items[idx])
            }
            print("SUM: ",infA.value(), " + ", infB.value(), " = ", result.value(), "\n")
        }
    void: init(me int: valA, me int: valB, me int: size) <- {
        Allocate(baseline)
        baseline.initAsBaseline(size, baseline)
        our inf:: infA; infA.initInf(baseline, size, valA)
        our inf:: infB; infB.initInf(baseline, size, valB)
        our inf:: result; doOp(infA, infB, result)
    }
}

struct iExp{

    void: dispJoin(our inf: masterBaseline, me int: A_size, me int: A_val, me int: B_size, me int: B_val, me int: R_size, me int: R_val) <- {

        our inf:: topInf; topInf.initInf(masterBaseline, R_size, R_val)
        me string: expectedStr <- topInf.stringifyLong(0)
  //      print("topInf: ", expectedStr, "\n")

        our inf:: termA; termA.initInf(masterBaseline, A_size, A_val)
  //      print(" termA: ", termA.stringifyLong(0), "\n")

        our inf:: B_base; B_base.initAsCosets(masterBaseline, B_size, B_base)
  //      print("B_base: ", B_base.stringifyLong(1), "\n")

        our inf:: termB; termB.initInf(B_base, B_size, B_val)
  //      print(" termB: ", termB.stringifyLong(1), "\n")

        me int: A_newVal <- termA.value()
  //      print(" A_newVal:", A_newVal, "\n")
        our inf: tmp <- termB.items[0]
        me int: startIdx <- masterBaseline.indexOf(tmp.items[A_newVal])
        our inf:: result; result.initInf(masterBaseline, R_size, startIdx)
        me string: resultStr <- result.stringifyLong(0)
        if(resultStr!=expectedStr){print("MISMATCH: ",resultStr, " != ", expectedStr); exit(1)}
        print(">> (", termA.stringifyLong(0) + "  " +termB.stringifyLong(0)+")  =  "+ resultStr, "\n")
    }

    void: testCombos(our inf: masterBaseline, me int: max) <- {
        withEach A_size in RANGE(1..max+1){         if(A_size==0){print("#ZERO:")}
            withEach A_val in RANGE(0..A_size){
                withEach B_size in RANGE(1..max+1){
                    withEach B_val in RANGE(0..B_size){
                        dispJoin(masterBaseline, A_size, A_val, B_size, B_val, A_size*B_size, A_val*B_size+B_val)// print("\n-------------------------------\n\n")
                    }
                }
            }
        }
    }

    void: run() <- {
        me int: maxSize <- 4
        our inf:: masterBaseline
        masterBaseline.initAsBaseline(25, masterBaseline)//maxSize*maxSize)
        print("master:", masterBaseline.stringifyLong(0), "\n\n")

//~ withEach n in RANGE(0..12){
    //~ our inf:: termA; termA.initInf(masterBaseline, 12, n)
    //~ print(" termA: ", termA.stringifyLong(0), "\n")
//~ }
        testCombos(masterBaseline, maxSize)

        //~ dispJoin(masterBaseline, 3, 1, 4, 2, 12, 6) print("\n-------------------------------\n\n")
        //~ dispJoin(masterBaseline, 3, 0, 4, 0, 12, 0) print("\n-------------------------------\n\n")
        //~ dispJoin(masterBaseline, 3, 0, 4, 2, 12, 2) print("\n-------------------------------\n\n")


    }
}
struct testRebaseCombos{
    our inf: zero
    our inf: crnt

    void: doTest(me int: size) <- {
        me List<our inf>: infs
        Allocate(zero)
        zero.initAsBaseline(size, zero)
            print("ZERO#:",zero.stringifyLong(1),"\n")
        Allocate(crnt)
        crnt.initAscopyOf(zero)
            print("CRNT#:",crnt.stringifyLong(1),"\n")
        withEach idx in RANGE(0..size){
            our inf:: itm
            itm.initInf(crnt, size, idx)
            if(!itm.isValid(idx)){print("INVALID:")}
            print("    ",idx,":",itm.stringifyLong(0),"\n")
            infs.append(itm)
        }
        withEach zIdx in RANGE(0..size){
            crnt.rebase(zero, zIdx)
            print("CRNT ",zIdx,":",crnt.stringifyLong(0),"  -------\n")
            withEach vIdx in RANGE(0..size){
                our inf: itm <- infs[vIdx]
                me int: val <- itm.value()
                me string: spcr <- " "
                if(vIdx>9){spcr<-""}
                print("    ",spcr,vIdx,":",itm.stringifyLong(0))
                if(!itm.isValid(val)){print(" \tINVALID")}
                print("\n")
            }
        }
    }
}

struct testQuotients{
    me bool: showFailureCases <- true
    our inf: masterBaseline

    me int: QFails <- 0
    me int: DFails <- 0
    me int: Qzeros <- 0
    me int: Dzeros <- 0
    me int: total <- 0

    me string: printResult(me int:Swanted, me int: Vwanted, me int: Sgot, me int:Vgot, me int:term, me string: tailStr) <- {
        me string: S <- ""
        S <+- "*"+toString(Swanted)+"+"+toString(Vwanted)+"\t"
        if(Swanted==Sgot and Vwanted==Vgot){S <+- "PASS\t"}
        else if(Vwanted == 0 and Vgot==1){
            S <+- "ZERO\t";
            if(term==0){Dzeros<+- 1}
            else if(term==1){Qzeros<+- 1}
        } else {
            S<+- "FAIL  "
            S <+- "*"+toString(Sgot)+"+"+toString(Vgot)+"\t"
            if(term==0){DFails<+- 1}
            else if(term==1){QFails<+- 1}
            S <+- tailStr
        }
        return(S)
    }

    void: checkJoin(our inf: term, me int: size, me int: value, me int: quotient, me int:phase <- 0) <- {
        me int: divisor <- size / quotient
        me inf: D
        D.initAsDivisor(term, quotient, phase)
        our inf:: Q
        Q.initAsQuotient(term, divisor)
//print("INF-Q:",Q.mySymbol(),"\n")
        total <+- 1
        me int: Sd <- divisor
        me int: Sq <- quotient
        me int: Vd <- value / Sq
        me int: Vq <- value - (Vd*Sq)
        me int: result <- Vd * Sq + Vq
        //print(" Sd, Sq, Vd, Vq:", Sd,",  ", Sq,",  ", Vd,",  ", Vq,"\n")
        if(value>1 and Sd>1 and value % Sd == 0){print("MARK:  ")}
        if((divisor-1)*value == size){print("WRAP:  ")}
        if(isSmallPrime(value) and isSmallPrime(Sd)){print("PRIMES:  ")}
        print("RESULT:\t",phase,"\t*",size,"+",value," (",divisor,"*",quotient,"):\t",
                printResult(Sd, Vd, D.items.size(),D.value(), 0, "\tD"+D.stringifyLong(0)),"\t\t",
                printResult(Sq,Vq,Q.items.size(),Q.value(), 1, "\t\tQ"+Q.stringifyLong(0)),
                "\n")
        if(showFailureCases){
            our inf:: wanted; wanted.initInf(term, Sd, Vd)
            our inf::   goot;   goot.initInf(term, Sd, Vd+1)
            print("WANTED:", wanted.stringifyLong(0),"\n")
            print("  GOOT:", goot.stringifyLong(0),"\n")
            print("ACTUAL:", D.stringifyLong(0),"\n")
        }
    }

    void: doOneTest(me int: size, me int: value, me int: quotient, me int:phase <- 0) <- {
        print("\n----------------------------------------------------\n")
            our inf:: term; term.initWithBase(size, value);
            //print(term.stringifyLong(0),"\n")
            print(term.stringifyFull("Source infon"),"\n\n");
         //   withEach phase in RANGE(0..size / quotient){
         phase <- 0
                checkJoin(term, size, value, quotient, phase);
          //  }
            print("\n")
    }

    void: doTest() <- {
        me bool: doAllTests <- false
        if(doAllTests){
            Allocate(masterBaseline)
            me int: maxToTest <- 1024//12
            withEach size in RANGE(1024..maxToTest+1){
                me List<int>: coPrimes
                withEach D in RANGE(1..size+1){
                    me int: Q <- size / D
                    if(Q * D == size){
                        coPrimes.append(Q)
                    }
                }
                masterBaseline.initAsBaseline(size, masterBaseline)
                print("\n####################################################\n")
                print("BASE:",masterBaseline.stringifyLong(0), "\n")
                print("----------------------------------------------------\n")
                withEach val in RANGE(0..size){
                    our inf:: term; term.initInf(masterBaseline, size, val)
                    print("  PROD(*",size,"+",val,"):\t", term.stringifyLong(0), "\n")
                    me int: phase <- 0
                    withEach Q in coPrimes{
        //        print("----------------------------------------------------\n")
        //                    print(term.stringifyFull("Source Infon"),"\n");
                            checkJoin(term, size, val, Q, phase)
                    }
                    //print("Size:",size, "  val:",val, " total:",total,"  Q-Fails:",QFails, "  D-Fails:", DFails)
              //      print("\n")
                }
            }
        }
        else { // Do particular tests
            me int: phase <- 0
                doOneTest(6, 3, 2, phase)
                doOneTest(8, 3, 2, phase)
                doOneTest(9, 5, 3, phase)
                doOneTest(10,3, 2, phase)
                doOneTest(10,5, 2, phase)
                doOneTest(12,3, 2, phase)
                doOneTest(12,4, 3, phase)
                doOneTest(12,5, 3, phase)
                doOneTest(12,5, 2, phase)
                doOneTest(12,6, 4, phase)
                doOneTest(12,7, 4, phase)
                doOneTest(12,8, 3, phase)
        }
            print("\n\n D-Fails:",DFails, "    Q-Fails:",QFails, "    Total:", total, "   D-zeros:",Dzeros, "   Q-zeros:",Qzeros,"\n")
    }
}
struct infonWidget: inherits=DashboardWidget{
    me List<our inf>: infons

    void: init() <- {
        Allocate(textFont,"Ariel", "12")
        lineColor1 <- cdColor(255,0,0,255)
        lineColor2 <- cdColor(0,250,255,255)
        our inf:: masterBaseline
        masterBaseline.initAsBaseline(25, masterBaseline)//maxSize*maxSize)
        our inf:: term; term.initInf(masterBaseline, 12, 5)
        infons.append(term)

exit(1)
        //~ me innerAdd: iAdd
        //~ iAdd.init(3, 2, 5)

        //~ me testRebaseCombos: test1
        //~ test1.doTest(5)
    }
    void: draw(their GUI_ctxt: cr) <- {
        print("In DRAW Infon WIDGET!!!!!!!()\n")
        cr.setColor(styler.Gray)
        cr.setLineWidth(1)
        cr.rectangle(0,0,1200,1200)
        cr.fillNow()

        withEach infn in infons{
            infn.baseline.draw(cr, 100, 40)
            infn.draw(cr, 100, 100)
        }
    }
}

struct GLOBAL{
    their GUI_canvas: drawing_area
    their infonWidget: infCanvas
    me int: fontSize
    our fontSpec: textFont
    me cdColor: lineColor1
    me cdColor: lineColor2
}

struct APP{
    me void: createAppArea(me GUI_Frame: frame) <- {
        Allocate(infCanvas)
        infCanvas.init()
        drawing_area  <- gui.newCanvas()
        drawing_area.setParent(infCanvas)
        gui.setWidgetSize(drawing_area, 1200, 1200)
        infCanvas.EventDispatcher.registerWidgetForEventDispatcher(drawing_area, infCanvas)
        addToContainerAndExpand (frame, drawing_area)
    }
}

do GeneratePtrSymbols(inf)
