// infonExper.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' LangVersion='GNU' optimize='speed';

Title = "infon Experimenter"
FileName = "infonExper"
Version = "0.8"
CopyrightMesg = "Copyright (c) 2021 Bruce Long"
Authors = "Bruce Long"
Description = "Run experiments on infons"
ProgramOrLibrary = "program"

featuresNeeded = [Logger, GUI_ToolKit, Dashboard, List]

LicenseText = `All Rights Reserved.`


mainStyle = {}
runCode=`
    logMgr.init(OFile)
    log("infonExper started")
    //~ me iExp: exp
    //~ exp.run()
    me testConstructing: testCtring
    testCtring.run()

    me testQuotients: testQ
    testQ.doTest()
`

do makeStyler(mainStyle)
do makeGUI(GUI_Spec)

struct GLOBAL{

    me string:zeroOrOneMode <- "zero" // Change to switch mode

    void: drawArrow(their GUI_ctxt: cr, me int: startX, me int: startY, me int: endX, me int: endY) <- {
        me double: tipLength <- 10
        me double: tipAngle <- 0.35

        me double: angle <- atan2(double(endY) - double(startY), double(endX) - double(startX)) + 3.14159265359

        me double: x1 <- double(endX) + tipLength * cos(angle - tipAngle)
        me double: y1 <- double(endY) + tipLength * sin(angle - tipAngle)
        me double: x2 <- double(endX) + tipLength * cos(angle + tipAngle)
        me double: y2 <- double(endY) + tipLength * sin(angle + tipAngle)

        cr.moveTo(startX, startY)
        cr.lineTo(endX, endY)
        cr.lineTo(x1, y1)
        cr.lineTo(x2, y2)
        cr.lineTo(endX, endY)
        cr.closePath()
        cr.fillKeep()
        cr.strokeNow()
    }
}

struct inf{
    their inf: baseline
    me List<their inf>: items
    me flag: isBase

    me int: isValid(me int: val) <- {
        me int: size <- items.size()

             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX-1,size)])

        their inf: startItm <- items[0]
        their inf: crntBaseItm <- startItm
        their inf: crntItm <- items[indexOf(crntBaseItm)]
        withEach idx in RANGE(0..size){

    //~ print("\n     idx:", idx, "   Base idx:", baseline.indexOf(crntBaseItm), "\t(", crntBaseItm.mySymbol(), ")",
                              //~ "   val idx:",  indexOf(crntItm), "\t(", crntItm.mySymbol(), ")"
    //~ )
            if(crntItm !== crntBaseItm){
    //            print("\n\n")
               // print("INV: *",size,"+",val," ERR: items[",idx,"] = ",items[idx].mySymbol(), " !=== ",crntBaseItm.mySymbol(), "\n")
                return(false)
            }
            crntItm <- findNext(crntItm, 1, size)

            crntBaseItm <- baseline.findNext(crntBaseItm, val, size)
            if(crntBaseItm===startItm){
                crntBaseItm <- baseline.findNext(crntBaseItm, 1, size)
                startItm <- crntBaseItm
            }
        }
     //   print("\n\n")
        return(true)
    }

    void: initAsBaseline(me int: size) <- {
        baseline <- self
        isBase <- true
        items.clear()
        withEach count in RANGE(0..size){
            their inf:: itm   // allocate a null inf
            items.append(itm)
        }
    }
    void: initAscopyOf(their inf: orig) <- {
        me int: size <- orig.items.size()
        baseline <- orig.baseline
        items.clear()
        withEach count in RANGE(0..size){
            items.append(orig.items[count])
        }
    }
    void: initAsQuotientBaseLine(their inf: base, me int: size) <- {
        baseline <- base
    }

    me int: indexOf(their inf: item) <- {
        me int: size <- items.size()
        if(size==0){print("\n\nCannot take index of inf with no items.\n")}
        withEach idx in RANGE(0..size){
            if(item===items[idx]){return(idx)}
        }
        print("Index not found\n")
        return(-1)
    }

    their inf: findNext(their inf: crnt, me int: n, me int: size) <- {
        me int: crntPos <- indexOf(crnt)
        if(crntPos==-1){print("\n\nCould not find index of arg.\n")}
        me int: nextPos <- (crntPos+n)%size
        return(items[nextPos])
    }

    void: clear()<-{baseline <-NULL; items.clear()}

    void: initInf(their inf: base, me int: size, me int: value)<-{
        //print("initializing *", size, "+", value, ":" )
        baseline <- base
        their inf: startItm <- baseline.items[0]
        their inf: crntItm <- startItm
        withEach idx in RANGE(0..size){
            if(zeroOrOneMode=="zero"){items.append(crntItm)}
            crntItm <- baseline.findNext(crntItm, value, size)
            //print(toString(baseline.indexOf(crntItm))+" ")
            if(zeroOrOneMode!="zero"){items.append(crntItm)}
            if(crntItm===startItm){
                crntItm <- baseline.findNext(crntItm, 1, size)
                startItm <- crntItm
            }
        }
        //print("\n")
    }

    void: initAsCoset(their inf: parent, me int: size, me int: offset) <- {
        clear()
        me int: quotient <- parent.items.size()/size
        baseline <- parent //.baseline
        withEach pos in RANGE(0..size){
            items.append(parent.items[pos*quotient+offset])
        }
    }

    void: initAsCosets(their inf: parent, me int: size) <- {
        clear()
        me int: quotient <- size //parent.items.size()/size
        baseline <- self
        withEach pos in RANGE(0..size){
            their inf:: itm; itm.initAsCoset(parent, quotient, pos)
            items.append(itm)
        }
    }

    void: initAsQuotient(their inf: parent, me int: divisor) <-{
        me int: parentSize <- parent.items.size()
        me int: resultSize <- parentSize/divisor

        their inf: startItm <- parent.items[0%parentSize]
        //their inf: startItm <- parent.items[parent.indexOf(parent.baseline.items[1%parentSize])]
        their inf: crntItm <- startItm
        //print("parentSize:",parentSize," resultSize:",resultSize,"\n")
        their inf:: bLine
        bLine.initAsBaseline(resultSize)
        baseline <- bLine
        me List<me int>:baseItems
        withEach idx in RANGE(0..resultSize){
            me int: newIDX <- parent.baseline.indexOf(crntItm)
            baseItems.append(newIDX)
            baseline.items[idx] <- crntItm
            //print("IDX:"+toString(parent.indexOf(crntItm))+"   parent.base IDX:"+toString(newIDX)+" \n")
            crntItm <- parent.findNext(crntItm, divisor, parentSize)
            if(crntItm===startItm){
                crntItm <- parent.findNext(crntItm, 1, parentSize)
                startItm <- crntItm
            }
        }

        me inf: baseStart <- parent.baseline.items[0]
        me inf: base <- baseStart
        withEach item in parent.baseline.items{
            //print("item.mySymbol:",item.mySymbol()+"\n")
            withEach result in baseItems{
                if(item.mySymbol()==parent.baseline.items[result].mySymbol()){
                    items.append(item)
                    //print("    items[result].mySymbol:",parent.baseline.items[result].mySymbol())
                    //print("    result:",result,"\n")
                }
            }
            base <- parent.baseline.findNext(base, divisor, parentSize)
            if(base === baseStart){
                base <- parent.baseline.findNext(base, 1, parentSize)
                baseStart <- base
            }
        }
    }

    void: initAsDivisor(their inf: parent, me int: quotient) <-{
        me int: parentSize <- parent.items.size()
        me int: resultSize <- parentSize/quotient
        their inf: startItm <- parent.items[0%parentSize]
        //their inf: startItm <- parent.items[parent.indexOf(parent.baseline.items[1%parentSize])]
        their inf: crntItm <- startItm
        //print("parentSize:",parentSize," resultSize:",resultSize,"\n")
        their inf:: bLine
        bLine.initAsBaseline(resultSize)
        baseline <- bLine
        me List<me int>:baseItems
        withEach idx in RANGE(0..resultSize){
            me int: newIDX <- parent.baseline.indexOf(crntItm)
            baseItems.append(newIDX)
            baseline.items[idx] <- crntItm
            //print("IDX:"+toString(parent.indexOf(crntItm))+"   parent.base IDX:"+toString(newIDX)+" \n")
            crntItm <- parent.findNext(crntItm, 1, parentSize)
            if(crntItm===startItm){
                crntItm <- parent.findNext(crntItm, 1, parentSize)
                startItm <- crntItm
            }
        }
        withEach item in parent.baseline.items{
            //print("item.mySymbol:",item.mySymbol()+"\n")
            withEach result in baseItems{
                if(item.mySymbol()==parent.baseline.items[result].mySymbol()){
                    items.append(item)
                    //print("    items[result].mySymbol:",parent.baseline.items[result].mySymbol())
                    //print("    result:",result,"\n")
                }
            }
        }
    }

    me int: negMod(me int:val, me int:mod) <- {
        if(val<0){return(val+mod)}
        return(val%mod)
    }

    me int: value() <- {
        me int: size <- items.size()
        if(zeroOrOneMode=="one"){
            if(size==1){return(0)}
            me int: count <- 0
             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX-1,size)])
             //print("  ### zeroIDX:",zeroIDX, "   prevIDX:", prevIDX,"\n")
             return(size-prevIDX)


        //    their inf: startZero <- indexOf(baseline[0]) // Find 0 in items
            their inf: end <- items[0]        // Bug: find the next item
        //    me int: startIDX <- baseline.indexOf(startZero)
            me int: endIDX   <- baseline.indexOf(end)
           // print("  ### Start:",startIDX, "   End:", endIDX,"\n")
           // return(abs((startIDX+5) - endIDX))
            their inf: crnt <- items[0]
            //their inf: crnt <- items[indexOf(baseline.items[0])]
            while(count < size and !(crnt===baseline.items[count % size])){
                count <+- 1
            }
            return(count)
        }
        else if(zeroOrOneMode=="zero"){
            if(size==1){return(0)}
             me int: zeroIDX <- indexOf(baseline.items[0]) // Find 0 in items
             me int: prevIDX <- baseline.indexOf(items[negMod(zeroIDX+1,size)])
             return(prevIDX)
        }
        return(-1)
    }

    void: rebase(their inf: zero, me int: newBaseVal) <- {
        me int: size <- items.size()
        if(zero.items.size() != size){print("\n\nError: in Rebase: this.size!=zero.size: zsize:",zero.items.size(),"  size:",size,"\n")}
        their inf: startItm <- zero.items[0]
        their inf: crntItm <- startItm
        items.clear()
        //baseline <- zero
        withEach idx in RANGE(0..size){
            crntItm <- zero.findNext(crntItm, newBaseVal, size)
            //print(toString(indexOf(crntItm))+" ")
            items.append(crntItm)
            if(crntItm===startItm){
                crntItm <- zero.findNext(crntItm, 1, size)
                startItm <- crntItm
            }
        }
    }

    me string: stringify() <- {
        if(self==NULL){return("NULL")}
        me int: size <- items.size()
        if(size==0){
            me string: mSym <- mySymbol()
            me int: msLen <- mSym.size()-3
            me string: digits <- mSym.subStr(3, msLen)
            me int: val <- stoi(digits)-1
            if(val==9){msLen <-- 1}
            me string: result <- "#"+ toString(val)
            withEach p in RANGE(msLen..2){ result <+- " "}
            return(result)
        }
        me string: S <- "*"
        S <+- toString(size)
        me int: val <- value()
        S <+- "+" + toString(val)
        return(S)
    }

    me string: stringifyByPos(their inf: base) <- {
        if(self==NULL){return("NULL")}
        me int: size <- items.size()
        if(size==0){
            me int: val <- base.indexOf(this)
            me string: result <- "%"+ toString(val)+"  "
            return(result)
        }
        return(stringify())
    }

    me string: stringifyLong(me int: depth) <- {
        me string: S <- stringify()+":["
        withEach idx in RANGE(0..items.size()){
            if(depth>0){
                S <+- items[idx].stringifyLong(depth-1)+" "
            }else{
                //S <+- items[idx].stringify()+" "
                S <+- items[idx].stringifyByPos(baseline)+" "
            }
        }
        S <+- "]"
        me int: val <- value()
        if(!isValid(val)){print(":INVALID<",val,"> ")}
        return(S)
    }

    void: printCosets(me int:size) <- {
        me int: quotient <- items.size()/size
        withEach idx in RANGE(0..quotient){
            their inf:: Inf; Inf.initAsCoset(self, size, idx)
            print("    ",idx,"\t", Inf.stringifyLong(0), "\n")
        }
    }

    void: draw(their GUI_ctxt: cr, me int: xLoc, me int: yLoc) <- {

        print("In DRAW Infon\n")
        if(self==NULL){
            cr.setColor(styler.Black)
            renderText(cr, "NULL ", textFont, xLoc, yLoc)
            cr.strokeNow()
            return()
        }
        me string: S <- stringify()+":"
        if(isBase){S <- "BASE:"}
            cr.setColor(styler.Black)
            renderText(cr, S, textFont, xLoc, yLoc+20)
            cr.strokeNow()

        me int: xpos <- xLoc
        cr.rectangle(xLoc+65, yLoc, items.size()*30, 25); cr.strokeNow()
        withEach idx in RANGE(0..items.size()){
            cr.moveTo(xLoc+65+((idx+1)*30), yLoc)
            cr.lineTo(xLoc+65+((idx+1)*30), yLoc+25)
        }
        cr.strokeNow()
        if(!isBase){
            cr.setColor(styler.Blue)
            withEach idx in RANGE(0..items.size()){
                me int: baseIdx  <- baseline.indexOf(items[idx])
                drawArrow(cr, xLoc+65+((idx)*30)+15, yLoc+10, xLoc+65+((baseIdx)*30)+15, yLoc-60+25)
            }
        }
    }

}

struct testConstructing{
    void: run() <- {
        me int: max <- 12
        their inf:: masterBaseline
        masterBaseline.initAsBaseline(25)//maxSize*maxSize)
        print("master:", masterBaseline.stringifyLong(0), "\n\n")
        withEach A_size in RANGE(1..max+1){         if(A_size==0){print("!#ZERO:", A_size)}
            withEach A_val in RANGE(0..A_size){
                their inf:: termA; termA.initInf(masterBaseline, A_size, A_val)
                print(" termA: ",A_size,": ", termA.stringifyLong(0), "\n")
            }
            print("\n");
        }
    }
}

struct innerAdd{
    their inf: baseline

    void: doOp(their inf: infA, their inf: infB, their inf: result) <- {
            me int: sum <- infA.value() + infB.value()
            result.baseline <- infA.baseline
            withEach idx in RANGE(0..infA.items.size()){
                result.items.append(infA.items[idx])
            }
            print("SUM: ",infA.value(), " + ", infB.value(), " = ", result.value(), "\n")
        }
    void: init(me int: valA, me int: valB, me int: size) <- {
        Allocate(baseline)
        baseline.initAsBaseline(size)
        their inf:: infA; infA.initInf(baseline, size, valA)
        their inf:: infB; infB.initInf(baseline, size, valB)
        their inf:: result; doOp(infA, infB, result)
    }
}

struct iExp{

    void: dispJoin(their inf: masterBaseline, me int: A_size, me int: A_val, me int: B_size, me int: B_val, me int: R_size, me int: R_val) <- {

        their inf:: topInf; topInf.initInf(masterBaseline, R_size, R_val)
        me string: expectedStr <- topInf.stringifyLong(0)
  //      print("topInf: ", expectedStr, "\n")

        their inf:: termA; termA.initInf(masterBaseline, A_size, A_val)
  //      print(" termA: ", termA.stringifyLong(0), "\n")

        their inf:: B_base; B_base.initAsCosets(masterBaseline, B_size)
  //      print("B_base: ", B_base.stringifyLong(1), "\n")

        their inf:: termB; termB.initInf(B_base, B_size, B_val)
  //      print(" termB: ", termB.stringifyLong(1), "\n")

        me int: A_newVal <- termA.value()
  //      print(" A_newVal:", A_newVal, "\n")
        their inf: tmp <- termB.items[0]
        me int: startIdx <- masterBaseline.indexOf(tmp.items[A_newVal])
        their inf:: result; result.initInf(masterBaseline, R_size, startIdx)
        me string: resultStr <- result.stringifyLong(0)
        if(resultStr!=expectedStr){print("MISMATCH: ",resultStr, " != ", expectedStr); exit(1)}
        print(">> (", termA.stringifyLong(0) + "  " +termB.stringifyLong(0)+")  =  "+ resultStr, "\n")
    }

    void: testCombos(their inf: masterBaseline, me int: max) <- {
        withEach A_size in RANGE(1..max+1){         if(A_size==0){print("#ZERO:")}
            withEach A_val in RANGE(0..A_size){
                withEach B_size in RANGE(1..max+1){
                    withEach B_val in RANGE(0..B_size){
                        dispJoin(masterBaseline, A_size, A_val, B_size, B_val, A_size*B_size, A_val*B_size+B_val)// print("\n-------------------------------\n\n")
                    }
                }
            }
        }
    }

    void: run() <- {
        me int: maxSize <- 4
        their inf:: masterBaseline
        masterBaseline.initAsBaseline(25)//maxSize*maxSize)
        print("master:", masterBaseline.stringifyLong(0), "\n\n")

//~ withEach n in RANGE(0..12){
    //~ their inf:: termA; termA.initInf(masterBaseline, 12, n)
    //~ print(" termA: ", termA.stringifyLong(0), "\n")
//~ }
        testCombos(masterBaseline, maxSize)

        //~ dispJoin(masterBaseline, 3, 1, 4, 2, 12, 6) print("\n-------------------------------\n\n")
        //~ dispJoin(masterBaseline, 3, 0, 4, 0, 12, 0) print("\n-------------------------------\n\n")
        //~ dispJoin(masterBaseline, 3, 0, 4, 2, 12, 2) print("\n-------------------------------\n\n")


    }
}
struct testRebaseCombos{
    their inf: zero
    their inf: crnt

    void: doTest(me int: size) <- {
        me List<their inf>: infs
        Allocate(zero)
        zero.initAsBaseline(size)
            print("ZERO#:",zero.stringifyLong(1),"\n")
        Allocate(crnt)
        crnt.initAscopyOf(zero)
            print("CRNT#:",crnt.stringifyLong(1),"\n")
        withEach idx in RANGE(0..size){
            their inf:: itm
            itm.initInf(crnt, size, idx)
            if(!itm.isValid(idx)){print("INVALID:")}
            print("    ",idx,":",itm.stringifyLong(0),"\n")
            infs.append(itm)
        }
        withEach zIdx in RANGE(0..size){
            crnt.rebase(zero, zIdx)
            print("CRNT ",zIdx,":",crnt.stringifyLong(0),"  -------\n")
            withEach vIdx in RANGE(0..size){
                their inf: itm <- infs[vIdx]
                me int: val <- itm.value()
                me string: spcr <- " "
                if(vIdx>9){spcr<-""}
                print("    ",spcr,vIdx,":",itm.stringifyLong(0))
                if(!itm.isValid(val)){print(" \tINVALID")}
                print("\n")
            }
        }
    }
}

struct testQuotients{
    me inf: masterBaseline

    me int: QFails <- 0
    me int: DFails <- 0
    me int: total <- 0

    me string: printResult(me int:Swanted, me int: Vwanted, me int: Sgot, me int:Vgot, me int:term, me string: tailStr) <- {
        me string: S <- ""
        S <+- "*"+toString(Swanted)+"+"+toString(Vwanted)+"\t"
        if(Swanted==Sgot and Vwanted==Vgot){S <+- "PASS\t"}
        else if((zeroOrOneMode=="one")  and Vwanted == 0 and Vgot==1){S <+- "ZERO!\t"}
        else if((zeroOrOneMode=="zero") and Vwanted == 0 and Vgot==1){S <+- "ONE!!\t"}
        else {
            S <+- "*"+toString(Sgot)+"+"+toString(Vgot)+"\t"
            if(term==0){DFails<+- 1}
            else if(term==1){QFails<+- 1}
            S <+- tailStr
        }
        return(S)
    }

    void: checkJoin(their inf: term, me int: size, me int: value, me int: quotient) <- {
        me int: divisor <- size / quotient
        me inf: Q
        Q.initAsQuotient(term, divisor)
        me inf: D
        D.initAsDivisor(term, quotient)

        total <+- 1
        me int: Sd <- divisor
        me int: Sq <- quotient
        me int: Vd <- value / Sq
        me int: Vq <- value - (Vd*Sq)
        me int: result <- Vd * Sq + Vq
        //print(" Sd, Sq, Vd, Vq:", Sd,",  ", Sq,",  ", Vd,",  ", Vq,"\n")
        print("\t",divisor,"*",quotient,":\t",
                printResult(Sd, Vd, D.items.size(),D.value(), 0, ""),"\t\t",
                printResult(Sq,Vq,Q.items.size(),Q.value(), 1, "\t\t"+Q.stringifyLong(0)),
                "\n")
        //~ if(Q.value() == Vq){
            //~ print("\t",divisor,"*",quotient,": \tPASSED\n")
        //~ } else{
            //~ print("\t",divisor,"*",quotient,": \t *",Sq,"+",Vq,"\tgot: *",Q.items.size(),"+",Q.value(),"\n")
           // print("\t",divisor,"*",quotient,": \t", //dispFieldAsText(D.stringifyLong(0),50)," X ",
          //          dispFieldAsText(Q.stringifyLong(0),50))
//          print("\t\t =  *",Q.items.size() * D.items.size()," +", Q.value() * D.items.size() + D.value()," ")
           // print("\t\t =  *",D.items.size() * Q.items.size()," +", D.value() * Q.items.size() + Q.value(),"\n")
        //~ }
    }

    void: doTest() <- {
        me int: maxToTest <- 12
        withEach size in RANGE(1..maxToTest+1){
            masterBaseline.initAsBaseline(size)
            print("\n####################################################\n")
            print("BASE:",masterBaseline.stringifyLong(0), "\n")
            print("----------------------------------------------------\n")
            withEach val in RANGE(0..size){
                their inf:: term; term.initInf(masterBaseline, size, val)
                print("  PROD(*",size,"+",val,"):\t", term.stringifyLong(0), "\n")
                withEach D in RANGE(1..size+1){
                    me int: Q <- size / D
                    if(Q * D == size){
                        checkJoin(term, size, val, Q)
                    }
                }
                print("\n")
            }
        }
print("\n\n D-Fails:",DFails, "    Q-Fails:",QFails, "    Total:", total,"\n")
    }
}
struct infonWidget: inherits=DashboardWidget{
    me List<their inf>: infons

    void: init() <- {
        Allocate(textFont,"Ariel", "12")
        lineColor1 <- cdColor(255,0,0,255)
        lineColor2 <- cdColor(0,250,255,255)
        their inf:: masterBaseline
        masterBaseline.initAsBaseline(25)//maxSize*maxSize)
        their inf:: term; term.initInf(masterBaseline, 12, 5)
        infons.append(term)

exit(1)
        //~ me innerAdd: iAdd
        //~ iAdd.init(3, 2, 5)

        //~ me testRebaseCombos: test1
        //~ test1.doTest(5)
    }
    void: draw(their GUI_ctxt: cr) <- {
        print("In DRAW Infon WIDGET!!!!!!!()\n")
        cr.setColor(styler.Gray)
        cr.setLineWidth(1)
        cr.rectangle(0,0,1200,1200)
        cr.fillNow()

        withEach infn in infons{
            infn.baseline.draw(cr, 100, 40)
            infn.draw(cr, 100, 100)
        }
    }
}

struct GLOBAL{
    their GUI_canvas: drawing_area
    their infonWidget: infCanvas
    me int: fontSize
    our fontSpec: textFont
    me cdColor: lineColor1
    me cdColor: lineColor2
}

struct APP{
    me void: createAppArea(me GUI_Frame: frame) <- {
        Allocate(infCanvas)
        infCanvas.init()
        drawing_area  <- gui.newCanvas()
        drawing_area.setParent(infCanvas)
        gui.setWidgetSize(drawing_area, 1200, 1200)
        infCanvas.EventDispatcher.registerWidgetForEventDispatcher(drawing_area, infCanvas)
        addToContainerAndExpand (frame, drawing_area)
    }
}

do GeneratePtrSymbols(inf)
