//////////////////  Classes for Slipstream Based Applications
// Slipstream.Lib.dog

//LinuxTestBuild: Platform='Linux' CPU='amd64' Lang='CPP' testMode='makeTests';
LinuxBuild:     Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';

FileName = "slipstream"
Version = "0.1"
CopyrightMesg = "Copyright (c) 2020-<YEAR> Bruce Long"
Authors = "Bruce Long"
Description = "The Slipstream Engine"
ProgramOrLibrary = "program"

featuresNeeded = [Proteus, Logger, Unicode, BigNumbers, Threads, IOBuffer, EarleyParser, Quic] // Crypto, P2P_Manager]

LicenseText = `This file is part of the "Slipstream Development Suite" All Rights Reserved.`

runCode=`
    logMgr.init(OFile)
    log("Slipstream CORE started")
    me SlipstreamCore: CORE
    CommandLineManager.processCmdLine(joinCmdStrings(argc, argv), false);
    CommandLineManager.defineOption("Slip", "topFile", "-f", "--file", "The top-level file to load.")
    me string: topFile <- CommandLineManager.getOption("Slip", "topFile")
    if(topFile==""){topFile <- "world.pr"}
    CORE.run(topFile)
`
struct Repository{ // Load, track, save, pull, push, pullReq, etc.
    me string: repoName
    me string: repoLocator
    our infon: repoInfon
    our infon: initAndLoad(their ConnectionManager: connectionMgr, me string: name, me string:locator) <- {
        log("Starting repository:"+name+" at "+repoLocator)
        Allocate(repoInfon)
        repoName    <- name
        repoLocator <- locator
        connectionMgr.startNewConnection(repoInfon, repoLocator)
        log("Started repository:"+name+" at "+repoLocator)
        return(repoInfon)
    }
}

model InfonConnector{
    me strBuf: inputBuf
    me strBuf: outputBuf
    me int:    statusCode
    me string: statusMesg
    me bool:   inputEOF
    void: init(me string: itemRefStr) <- {}
    me string: readInputStream() <- {return("")}
    bool: pumpOutputBuf()        <- {return(false)}
    void: submitProteusResult()  <- {}
    void: handleSystemError()    <- {}
    void: handleSyntaxError()    <- {}
    void: handleProteusError()   <- {}
}
struct InfonConnector{}

struct FileConnector: inherits=InfonConnector {
    me FileStream: dataFile
    void: init(me string: itemRefStr) <- {
        me string: fileDir <- getAssetsDir() +"/"+itemRefStr //+"/repos"
        dataFile.open(fileDir)
        if (dataFile.failure()){logFatalError("Failed to open file: " + fileDir + "\n")}
        inputEOF<-false
        log("Initialized:"+itemRefStr)
    }
    me string: readInputStream()  <- {
        me string: data
        if(!dataFile.EOF()){
            data <- dataFile.getLine()+"\n"
        } else{inputEOF<-true; log("INPUT_EOF")}
        return(data)
    }
    bool: pumpOutputBuf() <- {return(false)}
}
struct ClipConnector: inherits=InfonConnector {}
struct UserConnector: inherits=InfonConnector {}
struct IPFSConnector: inherits=InfonConnector {}
struct IPNSConnector: inherits=InfonConnector {}
struct RepoConnector: inherits=InfonConnector {}     // Connector to a Repository instance.
struct GUI_Connector: inherits=InfonConnector {}     // Kbd, mouse/touchScn, screen, clipboard, etc.
struct MediaConnector:inherits=InfonConnector {}     // Microphones, audioOut, videoSource
struct AgentConnector:inherits=InfonConnector {      // Connect to other agents
    me QuicEngine_Client: clientQuicEngine
    void: init(me string: specString) <- {
        me int: colonPos <- specString.find(":")
        me string: connectionTypeStr <- specString.subStr(0, colonPos)
        me string: connectionIDStr   <- specString.subStr(colonPos+1)
        colonPos <- connectionIDStr.find(":")
        me string: fileToFetch <- connectionIDStr.subStr(0, colonPos)
        me string: IPAddr <- connectionIDStr
        me string: portNumStr <- connectionIDStr
        clientQuicEngine.inputBuf <- inputBuf
        clientQuicEngine.init("xferText.pr", false, IPAddr, stoi(portNumStr))
    }
    bool: pumpInputBuf()  <- {
        //~ if(!dataFile.EOF()){
            //~ me string: line <- dataFile.getLine()
            //~ inputBuf.putStr(line)
            //~ return(true)
        //~ }
        return(false)
    }
    bool: pumpOutputBuf() <- {return(false)}
}
struct SensorConnector  : inherits=InfonConnector {}
struct RobotConnector   : inherits=InfonConnector {}
struct InternetConnector: inherits=InfonConnector {}
struct PhoneConnector   : inherits=InfonConnector {} // Services offered by phones


//////////////////////////////////////////////////////////////////////

struct InfonStream{ // InfonConnector -> Parse -> Extract -> Normalize
    our InfonConnector: source
    their Agent: parentAgent
    our ProteusParser: parser
    our infon: toFill
    me Threaded_infonParseAndExtractor: parseAndExtractor
    me ThreadedNormalizer: threadedNormalizer

    bool: pumpParserInputBuf() <- {
        me string: data <- source.readInputStream()
        if(!source.inputEOF and data.size()>0){
            parser.addSlotsToSSets(data.size())
            source.inputBuf.putStr(data)
        }
        return(!source.inputEOF)
    }

    void: init(our InfonConnector: connector, their Agent: agent, our ProteusParser: eParser, our infon: infToFill<-NULL) <- {
        source <- connector
        parentAgent <- agent
        parser <- eParser
        toFill <- infToFill
        if(toFill==NULL){Allocate(toFill)}
    }
    void: start() <- {
        threadedNormalizer.init(parentAgent, toFill)
        threadedNormalizer.start()
        parseAndExtractor.start(parser, source.inputBuf, toFill)
        while(pumpParserInputBuf()){}
        source.inputBuf.close()
//parseAndExtractor.waitForThreadsToExit() 
        threadedNormalizer.waitForExit()
        //log("Result:"+toString(toFill))
    }
    void: requestFinish() <- {}
}

struct ConnectionManager{ // Manage connections to a Proteus Agent
    their Agent: agent
    me Repository: device
    me Repository: user
    me Repository: world
    me List<our InfonStream>: connections
    our ProteusParser: parser

    void: init(their Agent: agnt) <- {
        agent <- agnt
        connections.clear()
        Allocate(parser)
        parser.populateGrammar()
    }
    me bool: startNewConnection(our infon: toFill, me string: specString) <- {
        log("Starting Connection:"+specString)
        our InfonConnector: connector <- makeInfonConnector(specString)
        our InfonStream:: iStream
        iStream.init(connector, agent, parser, toFill)
        connections.append(iStream)
        iStream.start()
        return(true)
    }
    our InfonConnector: makeInfonConnector(me string: specString)<-{ // connector factory
        trimWS(specString)
        me int: colonPos <- specString.find(":")
        me string: connectionTypeStr <- specString.subStr(0, colonPos)
        me string: connectionIDStr   <- specString.subStr(colonPos+1) // Skip :
        if     (connectionTypeStr=="file"){our FileConnector:: retval; retval.init(connectionIDStr); return(retval)}
        else if(connectionTypeStr=="repo"){our RepoConnector:: retval; retval.init(connectionIDStr); return(retval)}
        else if(connectionTypeStr=="user"){our UserConnector:: retval; retval.init(connectionIDStr); return(retval)}
        else if(connectionTypeStr=="ipfs"){our IPFSConnector:: retval; retval.init(connectionIDStr); return(retval)}
        else if(connectionTypeStr=="ipns"){our IPNSConnector:: retval; retval.init(connectionIDStr); return(retval)}
        else if(connectionTypeStr=="agnt"){our AgentConnector:: retval; retval.init(connectionIDStr); return(retval)}
        else {}
        log("WARNING, No connection was made for: "+specString)
        return(NULL)
    }
}

struct SlipstreamCore: inherits=ProteusCore{ // Create and manage a slipstream node
    me Agent: agent
    me string: masterFile
    me ConnectionManager: connectionMgr
    me string: statusMsg
    me bool: idling

    me bool: normalizeFromStreamSpec(our infon: infToFill, me string: streamSpec) <- {
        return(connectionMgr.startNewConnection(infToFill, streamSpec))
    }

    void: initCoreServices()<-{
        // Init P2P connections and DHTs
        // Etc.
    }
    void: init(me string: topFile) <- {
        streamingNormMode <- true
        initHardFuncNames()
        statusMsg <- ""  // Empty == OK
        masterFile <- "file:"+topFile
        initCoreServices()
        agent.init(this)
        idling <- true
        connectionMgr.init(agent)
    }
    void: start() <- {
        //agent.device <- connectionMgr.device.initAndLoad(connectionMgr, "device", masterFile)
        //agent.user   <- connectionMgr.user.initAndLoad(connectionMgr,  "user", "file:user.pr")
        agent.world  <- connectionMgr.user.initAndLoad(connectionMgr,  "world","file:user.pr")

//log("WORLD:"+toString(agent.world))
    }
    void: idle()<-{
        idling <- true
        while(idling){
            // process events if needed
            sleep(10)
        }
    }
    void: stopIdling()<-{idling <- false}
    void: shutdown()<-{} // TODO: Ask all streams to quit then wait for them. Dealloc anything

    void: run(me string: topFile) <- {
        // This is an example or for testing. Normally use a GUI's event loop.
        init(topFile)
        start()
        idle()
        shutdown()
    }
}
