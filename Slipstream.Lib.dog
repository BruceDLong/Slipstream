//////////////////  Classes for Slipstream Based Applications
// Slipstream.Lib.dog

//LinuxTestBuild: Platform='Linux' CPU='amd64' Lang='CPP' testMode='makeTests';
LinuxBuild:     Platform='Linux' CPU='amd64' Lang='CPP' LangVersion='GNU' optimize='speed';

FileName = "slipstreamCore"
Version = "0.1"
CopyrightMesg = "Copyright (c) 2020-<YEAR> Bruce Long"
Authors = "Bruce Long"
Description = "The Slipstream Engine"
ProgramOrLibrary = "program"

featuresNeeded = [Proteus, Logger, Unicode, BigNumbers, Threads, IOBuffer, EarleyParser, Quic] // Crypto, P2P_Manager]

LicenseText = `This file is part of the "Slipstream Development Suite" All Rights Reserved.`

runCode=`
    logMgr.init(OFile)
    log("Slipstream CORE started")
    CommandLineManager.processCmdLine(joinCmdStrings(argc, argv), false);
    CommandLineManager.defineOption("Slip", "topFile", "-f", "--file", "The top-level file to load.", "")
    me string: topFile <- CommandLineManager.getOption("Slip", "topFile")
    if(topFile==""){topFile <- "world.pr"}
    CORE.run(topFile)
`
do ManageCmdLine(cmd)

struct GLOBAL{
    me SlipstreamCore: CORE

    me uint64: lastOriginID
    me Map<uint64, our InfonStream>: infonSourceRecords // Maps infon::originID to the stream it came from.
}
struct Repository{ // Load, track, save, pull, push, pullReq, etc.
    me string: repoName
    me string: repoLocator
    our infon: repoInfon
    our infon: initAndLoad(their ConnectionManager: connectionMgr, me string: name, me string:locator) <- {
        log("Starting repository:"+name+" at "+repoLocator)
        Allocate(repoInfon)
        repoName    <- name
        repoLocator <- locator
        connectionMgr.startNewConnection(repoInfon, repoLocator)
        log("Started repository:"+name+" at "+repoLocator)
        return(repoInfon)
    }
}

#include quicProtocols.dog

model InfonConnector{
    our SStreamSpec: streamSpec
    me strBuf: inputBuf
    me strBuf: outputBuf
    me int:    statusCode
    me string: statusMesg
    me bool:   inputEOF
    their InfonStream: iStreamParent
    void: init(our SStreamSpec: SP) <- {}
    void: pumpInputBuff()        <- {}
    me string: readInputStream() <- {return("")}
    bool: pumpOutputBuf()        <- {return(false)}
    void: submitProteusResult()  <- {}
    void: handleSystemError()    <- {}
    void: handleSyntaxError()    <- {}
    void: handleProteusError()   <- {}
}
struct InfonConnector{}

struct FileConnector: inherits=InfonConnector {
    me FileStream: dataFile
    void: init(our SStreamSpec: SP) <- {
        streamSpec <- SP
        me string: filePath <- getAssetsDir() +"/"+streamSpec.contentArgs
        dataFile.open(filePath)
        if (dataFile.failure()){logFatalError("Failed to open file: " + filePath + "\n")}
        inputEOF<-false
        log("Initialized:"+filePath)
    }
    void: pumpInputBuff() <- {
        while(iStreamParent.pumpParserInputBuf()){}
        inputBuf.close()
    }
    me string: readInputStream()  <- {
        me string: data
        if(!dataFile.EOF()){
            data <- dataFile.getLine()+"\n"
        } else{inputEOF<-true; log("INPUT_EOF")}
        return(data)
    }
    bool: pumpOutputBuf() <- {return(false)}
}
struct ClipConnector: inherits=InfonConnector {}
struct UserConnector: inherits=InfonConnector {}
struct IPFSConnector: inherits=InfonConnector {}
struct IPNSConnector: inherits=InfonConnector {}
struct RepoConnector: inherits=InfonConnector {}     // Connector to a Repository instance.
struct GUI_Connector: inherits=InfonConnector {}     // Kbd, mouse/touchScn, screen, clipboard, etc.
struct MediaConnector:inherits=InfonConnector {}     // Microphones, audioOut, videoSource
struct AgentConnector:inherits=InfonConnector {      // Connect to other agents
    void: init(our SStreamSpec: SP) <- {
        streamSpec <- SP
        their QuicClient_Connection: qConn  <- CORE.quicClient.getClientConnection(SP.ipAddr, SP.portNum)
        if(qConn==NULL){log("ERROR setting up QuicClient_Connection."); return()}

        our FetchFile:: fetchFile
        fetchFile.setArgs(SP.contentArgs)
        fetchFile.source <- self
        qConn.enQSession(fetchFile)
        CORE.quicClient.start()
    }
}
struct SensorConnector  : inherits=InfonConnector {}
struct RobotConnector   : inherits=InfonConnector {}
struct InternetConnector: inherits=InfonConnector {}
struct PhoneConnector   : inherits=InfonConnector {} // Services offered by phones


//////////////////////////////////////////////////////////////////////

struct InfonStream{ // InfonConnector -> Parse -> Extract -> Normalize
    our InfonConnector: source
    me uint64: originID
    their Agent: parentAgent
    our ProteusParser: parser
    our infon: toFill
    me Threaded_infonParseAndExtractor: parseAndExtractor
    me ThreadedNormalizer: threadedNormalizer

    bool: pumpParserInputBuf() <- {
        me string: data <- source.readInputStream()
        if(!source.inputEOF and data.size()>0){
            parser.addSlotsToSSets(data.size())
            source.inputBuf.putStr(data)
        }
        return(!source.inputEOF)
    }

    void: init(our InfonConnector: connector, their Agent: agent, our ProteusParser: eParser, our infon: infToFill, me uint64: OriginID) <- {
        source   <- connector
        originID <- OriginID
        parentAgent <- agent
        parser <- eParser
        toFill <- infToFill
        source.iStreamParent <- self
        if(toFill==NULL){Allocate(toFill)}
        toFill.originID <- originID
    }
    void: start() <- {
        threadedNormalizer.init(parentAgent, toFill)
        threadedNormalizer.start()
        parseAndExtractor.start(parser, source.inputBuf, toFill)
        source.pumpInputBuff()
parseAndExtractor.waitForThreadsToExit()
        threadedNormalizer.waitForExit()
        //log("Result:"+toString(toFill))
    }
    void: requestFinish() <- {}
}

struct ConnectionManager{ // Manage connections to a Proteus Agent
    their Agent: agent
    me Repository: device
    me Repository: user
    me Repository: world

    void: init(their Agent: agnt) <- {
        agent <- agnt
        lastOriginID <- 0
    }
    me bool: startNewConnection(our infon: toFill, me string: specString) <- {
        me string: parentPath <- ""
print("toFill.originID:", toFill.originID,"\n")
        if(infonSourceRecords.containsKey(toFill.originID)){
            parentPath <- infonSourceRecords[toFill.originID].source.streamSpec.spec
            // Check for issues and remove slug from parentPath
            me int: lastSlashPos <- findLastSubString(parentPath, "/")
            if(lastSlashPos>=0){
                parentPath <- parentPath.subStr(0, lastSlashPos+1)
            }
        }
        log("Starting Connection:"+specString)
        lastOriginID <+- 1
        //TODO: Should need the next line as a proxy. Fix bug by checking modelArgs in codeNewVarStr() for {} constructor calls.
        their SlipstreamCore: tmpCore <- CORE
        our ProteusParser:: parser{CORE.infonGrammar, tmpCore, true, lastOriginID}
        our InfonConnector: connector <- makeInfonConnector(specString, parentPath)
        our InfonStream:: iStream
        iStream.init(connector, agent, parser, toFill, lastOriginID)
        infonSourceRecords[lastOriginID] <- iStream
        iStream.start()
        return(true)
    }

    our InfonConnector: makeInfonConnector(me string: specString, me string: parentPath)<-{ // connector factory
// if there is no schema: and no '//' concat specString and parentPath.
//TODO: gracefully handle errors
        if(specString[0]=="/"){specString <- specString.subStr(1)}
print("TO_LOAD:",parentPath, specString, "\n")
        our SStreamSpec:: SP; SP.setSpec(parentPath+specString)
        //~ print("Protocol:'",    SP.protocolTag,"'\n")
        //~ print("connectArgs:'", SP.connectArgs,"'\n")
        //~ print("contentArgs:'", SP.contentArgs,"'\n")
        //~ print("ipAddr:'",      SP.ipAddr,"'\n")
        //~ print("portNum:'",     SP.portNum,"'\n")

        me string: protocolTag <- SP.protocolTag
        if     (protocolTag=="file"){our FileConnector:: retval;  retval.init(SP); return(retval)}
        else if(protocolTag=="repo"){our RepoConnector:: retval;  retval.init(SP); return(retval)}
        else if(protocolTag=="user"){our UserConnector:: retval;  retval.init(SP); return(retval)}
        else if(protocolTag=="ipfs"){our IPFSConnector:: retval;  retval.init(SP); return(retval)}
        else if(protocolTag=="ipns"){our IPNSConnector:: retval;  retval.init(SP); return(retval)}
        else if(protocolTag=="agnt"){our AgentConnector:: retval; retval.init(SP); return(retval)}
        else if(protocolTag=="quic"){our AgentConnector:: retval; retval.init(SP); return(retval)}
        else {}
        log("WARNING, No connection was made for: "+specString)
        return(NULL)
    }
}

struct SlipstreamCore: inherits=ProteusCore{ // Create and manage a slipstream node
    me Agent: agent
    me string: masterFile
    me ConnectionManager: connectionMgr
    me string: statusMsg
    me bool: idling

    me bool: normalizeFromStreamSpec(our POV: infToFill, me string: streamSpec) <- {
        return(connectionMgr.startNewConnection(infToFill.pItem, streamSpec))
    }

    me QuicClient_Engine: quicClient

    void: initCoreServices()<-{
        // Init P2P connections and DHTs
        // Etc.
    me string: ipAddr <- "::1"
    me string: portNum<- slipnode_default_port
        quicClient.init("CFile", false, ipAddr, stoi(portNum))
    }
    void: init(me string: topFile) <- {
        streamingNormMode <- true
        initHardFuncNames()
        Allocate(infonGrammar)
        statusMsg <- ""  // Empty == OK
        masterFile <- "file://"+topFile
        initCoreServices()
        agent.init(this)
        idling <- true
        connectionMgr.init(agent)
    }
    void: start() <- {
        //agent.device <- connectionMgr.device.initAndLoad(connectionMgr, "device", masterFile)
        //agent.user   <- connectionMgr.user.initAndLoad(connectionMgr,  "user", "quic://[::1]:2006/user.pr")
        agent.world  <- connectionMgr.user.initAndLoad(connectionMgr,  "world","quic://[::1]:2006/WORLD/World.pr")
        //agent.world  <- connectionMgr.user.initAndLoad(connectionMgr,  "world","file:///WORLD/World.pr")

//log("WORLD:"+toString(agent.world))
    }
    void: idle()<-{
        idling <- true
        while(idling){
            // process events if needed
            print(".")
            sleep(10)
        }
    }
    void: stopIdling()<-{idling <- false}
    void: shutdown()<-{} // TODO: Ask all streams to quit then wait for them. Dealloc anything

    void: run(me string: topFile) <- {
        // This is an example or for testing. Normally use a GUI's event loop.
        init(topFile)
        start()
        idle()
        shutdown()
    }
}
