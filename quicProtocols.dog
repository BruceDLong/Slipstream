

struct FetchFile: inherits=QProtocol {
    me string: fileName
    me FileStream: fileStream

    our QProtocol: createClone() <- {
        our FetchFile:: retval
        return(retval)
    }
    void: init() <- {}
    void: onNewStream_CB(their QuicStream: qStream) <- {}
    void: INIT() <- {
        protocolIDPrefix <- "FetchFile" //"slip/fetchFile"
    }

    me string: serverInit() <- {
        print("INIT SERVER: ", protocolArgs,"\n")
        fileName <- protocolArgs
        fileStream.open(fileName)
        if(fileStream.failure()){
            print("ERROR: opening file:'",fileName,"'\n")
            return("ERR:"+taskID+":ERROR opening file:'"+fileName+"\n")
        }
        return("OK:"+taskID+"\n")
    }

    uint64: onServerRead(their QuicStream: qStream, their string: data, me bool: finished) <- {
        print("\nFETCH SERVER READ:",step,"\n")
        me uint64: bytesUsed

        return(bytesUsed)
    }
    bool: onServerWrite(their QuicStream: qStream) <- {
        me uint64: streamID <- qStream.getStreamID()
        print("\nFETCH SERVER WRITE STEP:",step," fileName:", fileName,"  STREAM_ID:",streamID,"\n")
        me uint64: bytesUsed <- fileStream.read(qStream.buff)
        if(fileStream.failure()){print("ERROR: reading buff, file:'",fileName,"'\n")}
        qStream.write(qStream.buff.subStr(0, bytesUsed))
        print(qStream.buff.subStr(0, bytesUsed))
        if(fileStream.EOF()){
            fileStream.close()
            qStream.close()
            step <+- 1
        }
        return(false)
    }

    void: clientInit() <- {}
    uint64: onClientRead(their QuicStream: qStream, their string: data, me bool: finished)<- {
        me uint64: streamID <- qStream.getStreamID()
        me uint64: bytesUsed
        print("\nFETCH CLIENT READ STEP:",step,"  STREAM_ID:",streamID,"\n")
        if(streamID==0){}
        else{
            print(data)
            qStream.readBuffer <- data
            bytesUsed <- data.size()
            if(finished and bytesUsed == data.size()){
                qStream.close()
            }
        }
        return(bytesUsed)
    }
    bool: onClientWrite(their QuicStream: qStream) <- {
        print("\nFETCH CLIENT WRITE STEP:",step,"\n")

        return(false)
    }
}
